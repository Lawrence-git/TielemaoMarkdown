{"compress":true,"commitItems":[["e9230164-3936-46c3-800b-ca8771a17cef",1534401487684,"## dd if=/dev/zero of=的含义是什么？Linux 下的dd命令使用详解\n\n(2012-07-25 18:08:36)\n\n| 标签：\n\n### [it](http://search.sina.com.cn/?c=blog&q=it&by=tag)\n\n | 分类： [linux](http://blog.sina.com.cn/s/articlelist_2338042447_6_1.html) |\n\n**一、dd命令的解释**\n\ndd：用指定大小的块拷贝一个文件，并在拷贝的同时进行指定的转换。\n\n注意：指定数字的地方若以下列字符结尾，则乘以相应的数字：b=512；c=1；k=1024；w=2\n\n**参数注释：**\n\n1\\. if=文件名：输入文件名，缺省为标准输入。即指定源文件。< if=input file >\n\n2\\. of=文件名：输出文件名，缺省为标准输出。即指定目的文件。< of=output file >\n\n3\\. ibs=bytes：一次读入bytes个字节，即指定一个块大小为bytes个字节。\n\n    obs=bytes：一次输出bytes个字节，即指定一个块大小为bytes个字节。\n\n    bs=bytes：同时设置读入/输出的块大小为bytes个字节。\n\n4\\. cbs=bytes：一次转换bytes个字节，即指定转换缓冲区大小。\n\n5\\. skip=blocks：从输入文件开头跳过blocks个块后再开始复制。\n\n6\\. seek=blocks：从输出文件开头跳过blocks个块后再开始复制。\n\n注意：通常只用当输出文件是磁盘或磁带时才有效，即备份到磁盘或磁带时才有效。\n\n7\\. count=blocks：仅拷贝blocks个块，块大小等于ibs指定的字节数。\n\n8\\. conv=conversion：用指定的参数转换文件。\n\n    ascii：转换ebcdic为ascii\n\n     ebcdic：转换ascii为ebcdic\n\n    ibm：转换ascii为alternate ebcdic\n\n    block：把每一行转换为长度为cbs，不足部分用空格填充\n\n    unblock：使每一行的长度都为cbs，不足部分用空格填充\n\n    lcase：把大写字符转换为小写字符\n\n    ucase：把小写字符转换为大写字符\n\n    swab：交换输入的每对字节\n\n     noerror：出错时不停止\n\n     notrunc：不截短输出文件\n\n    sync：将每个输入块填充到ibs个字节，不足部分用空（NUL）字符补齐。\n\n**二、dd应用实例**\n\n**1.****将本地的****/dev/hdb****整盘备份到****/dev/hdd**\n\n#dd if=/dev/hdb of=/dev/hdd\n\n**2.****将****/dev/hdb****全盘数据备份到指定路径的****image****文件**\n\n#dd if=/dev/hdb of=/root/image\n\n**3.****将备份文件恢复到指定盘**\n\n#dd if=/root/image of=/dev/hdb\n\n**4.****备份****/dev/hdb****全盘数据，并利用****gzip****工具进行压缩，保存到指定路径**\n\n#dd if=/dev/hdb | gzip > /root/image.gz\n\n**5.****将压缩的备份文件恢复到指定盘**\n\n#gzip -dc /root/image.gz | dd of=/dev/hdb\n\n**6.****备份与恢复****MBR**\n\n备份磁盘开始的512个字节大小的MBR信息到指定文件：\n\n#dd if=/dev/hda of=/root/image count=1 bs=512\n\n   count=1指仅拷贝一个块；bs=512指块大小为512个字节。\n\n恢复：\n\n#dd if=/root/image of=/dev/had\n\n将备份的MBR信息写到磁盘开始部分\n\n**7.****备份软盘**\n\n#dd if=/dev/fd0 of=disk.img count=1 bs=1440k (即块大小为1.44M)\n\n**8.****拷贝内存内容到硬盘**\n\n#dd if=/dev/mem of=/root/mem.bin bs=1024 (指定块大小为1k)  \n\n**9.****拷贝光盘内容到指定文件夹，并保存为cd.iso****文件**\n\n#dd if=/dev/cdrom(hdc) of=/root/cd.iso\n\n**10.****增加swap****分区文件大小**\n\n第一步：创建一个大小为256M的文件：\n\n#dd if=/dev/zero of=/swapfile bs=1024 count=262144\n\n第二步：把这个文件变成swap文件：\n\n#mkswap /swapfile\n\n第三步：启用这个swap文件：\n\n#swapon /swapfile\n\n第四步：编辑/etc/fstab文件，使在每次开机时自动加载swap文件：\n\n/swapfile    swap    swap    default   0 0\n\n**11.****销毁磁盘数据**\n\n#dd if=/dev/urandom of=/dev/hda1\n\n注意：利用随机的数据填充硬盘，在某些必要的场合可以用来销毁数据。\n\n**12.****测试硬盘的读写速度**\n\n#dd if=/dev/zero bs=1024 count=1000000 of=/root/1Gb.file\n\n#dd if=/root/1Gb.file bs=64k | dd of=/dev/null\n\n通过以上两个命令输出的命令执行时间，可以计算出硬盘的读、写速度。\n\n**13.****确定硬盘的最佳块大小：**\n\n#dd if=/dev/zero bs=1024 count=1000000 of=/root/1Gb.file\n\n#dd if=/dev/zero bs=2048 count=500000 of=/root/1Gb.file\n\n#dd if=/dev/zero bs=4096 count=250000 of=/root/1Gb.file\n\n#dd if=/dev/zero bs=8192 count=125000 of=/root/1Gb.file\n\n通过比较以上命令输出中所显示的命令执行时间，即可确定系统最佳的块大小。\n\n**14.****修复硬盘：**\n\n#dd if=/dev/sda of=/dev/sda 或dd if=/dev/hda of=/dev/hda\n\n当硬盘较长时间(一年以上)放置不使用后，磁盘上会产生magnetic flux point，当磁头读到这些区域时会遇到困难，并可能导致I/O错误。当这种情况影响到硬盘的第一个扇区时，可能导致硬盘报废。上边的命令有可能使这些数 据起死回生。并且这个过程是安全、高效的。\n\n**15.****利用****netcat****远程备份**\n\n#dd if=/dev/hda bs=16065b | netcat < targethost-IP > 1234\n\n在源主机上执行此命令备份/dev/hda\n\n#netcat -l -p 1234 | dd of=/dev/hdc bs=16065b\n\n在目的主机上执行此命令来接收数据并写入/dev/hdc\n\n#netcat -l -p 1234 | bzip2 > partition.img\n\n#netcat -l -p 1234 | gzip > partition.img\n\n以上两条指令是目的主机指令的变化分别采用bzip2、gzip对数据进行压缩，并将备份文件保存在当前目录。\n\n**将一个很大的视频文件中的第i个字节的值改成0x41（也就是大写字母A的ASCII值）**\n\necho A | dd of=bigfile seek=$i bs=1 count=1 conv=notrunc\n\n**三、/dev/null和/dev/zero的区别**\n\n/dev/null，外号叫无底洞，你可以向它输出任何数据，它通吃，并且不会撑着！\n\n/dev/zero，是一个输入设备，你可你用它来初始化文件。该设备无穷尽地提供0，可以使用任何你需要的数目——设备提供的要多的多。他可以用于向设备或文件写入字符串0。\n\n/dev/null------它是空设备，也称为位桶（bit bucket）。任何写入它的输出都会被抛弃。如果不想让消息以标准输出显示或写入文件，那么可以将消息重定向到位桶。\n\n#if=/dev/zero of=./test.txt bs=1k count=1\n#ls –l\n\ntotal 4\n-rw-r--r--    1 oracle   dba          1024 Jul 15 16:56 test.txt\n\n#find / -name access_log  2>/dev/null\n\n**3.1使用/dev/null **\n\n把/dev/null看作\"黑洞\"， 它等价于一个只写文件，所有写入它的内容都会永远丢失.，而尝试从它那儿读取内容则什么也读不到。然而， /dev/null对命令行和脚本都非常的有用\n\nl **禁止标准输出**\n\n#cat $filename >/dev/null\n\n文件内容丢失，而不会输出到标准输出.\n\nl **禁止标准错误**\n\n#rm $badname 2>/dev/null\n\n这样错误信息[标准错误]就被丢到太平洋去了\n\nl **禁止标准输出和标准错误的输出**\n\n#cat $filename 2>/dev/null >/dev/null\n\n如果\"$filename\"不存在，将不会有任何错误信息提示；如果\"$filename\"存在， 文件的内容不会打印到标准输出。\n\n因此，上面的代码根本不会输出任何信息。当只想测试命令的退出码而不想有任何输出时非常有用。\n\n#cat $filename &>/dev/null\n\n这样其实也可以， 由 Baris Cicek 指出\n\n**自动清空日志文件的内容**\n\nl Deleting contents of a file, but preserving the file itself, with all attendant permissions(from Example 2-1 and Example 2-3): \n\n#cat /dev/null > /var/log/messages\n#  : > /var/log/messages   有同样的效果， 但不会产生新的进程.（因为:是内建的）\n#cat /dev/null > /var/log/wtmp\n\n**隐藏cookie而不再使用**\n\n特别适合处理这些由商业Web站点发送的讨厌的\"cookies\"\n\n#if [ -f ~/.netscape/cookies ]  # 如果存在则删除.\n#then\n#rm -f ~/.netscape/cookies\n#fi\n#ln -s /dev/null ~/.netscape/cookies\n\n现在所有的cookies都会丢入黑洞而不会保存在磁盘上了.\n\n**3.2使用/dev/zero**\n\n像/dev/null一样， /dev/zero也是一个伪文件， 但它实际上产生连续不断的null的流（二进制的零流，而不是ASCII型的）。 写入它的输出会丢失不见， 而从/dev/zero读出一连串的null也比较困难， 虽然这也能通过od或一个十六进制编辑器来做到。 /dev/zero主要的用处是用来创建一个指定长度用于初始化的空文件，就像临时交换文件。\n\n**用****/dev/zero****创建一个交换临时文件**\n\n#!/bin/bash\n\n # 创建一个交换文件.\n\n ROOT_UID=0 # Root 用户的 $UID 是 0.\n\n E_WRONG_USER=65 # 不是 root?\n\n FILE=/swap\n\n BLOCKSIZE=1024\n\n MINBLOCKS=40\n\n SUCCESS=0\n\n # 这个脚本必须用root来运行.\n\n if [ \"$UID\" -ne \"$ROOT_UID\" ]\n\n   then\n\n   echo; echo \"You must be root to run this script.\"; echo\n\n   exit $E_WRONG_USER\n\n fi\n\n blocks=${1:-$MINBLOCKS} # 如果命令行没有指定，\n\n #+ 则设置为默认的40块.\n\n # 上面这句等同如：\n\n # --------------------------------------------------\n\n # if [ -n \"$1\" ]\n\n # then\n\n # blocks=$1\n\n # else\n\n # blocks=$MINBLOCKS\n\n # fi\n\n # --------------------------------------------------\n\n if [ \"$blocks\" -lt $MINBLOCKS ]\n\n then\n\n blocks=$MINBLOCKS # 最少要有 40 个块长.\n\n fi\n\n echo \"Creating swap file of size $blocks blocks (KB).\"\n\n dd if=/dev/zero of=$FILE bs=$BLOCKSIZE count=$blocks # 把零写入文件.\n\n mkswap $FILE $blocks # 将此文件建为交换文件（或称交换分区）.\n\n swapon $FILE # 激活交换文件.\n\n echo \"Swap file created and activated.\"\n\n exit $SUCCESS \n\n关于 /dev/zero 的另一个应用是为特定的目的而用零去填充一个指定大小的文件， 如挂载一个文件系统到环回设备 （loopback device）或\"安全地\" 删除一个文件\n\n**例子****创建****ramdisk**\n\n#!/bin/bash\n\n # ramdisk.sh\n\n # \"ramdisk\"是系统RAM内存的一段，\n\n #+ 它可以被当成是一个文件系统来操作.\n\n # 它的优点是存取速度非常快 (包括读和写).\n\n # 缺点: 易失性, 当计算机重启或关机时会丢失数据.\n\n #+ 会减少系统可用的RAM.\n\n # 10 # 那么ramdisk有什么作用呢?\n\n # 保存一个较大的数据集在ramdisk, 比如一张表或字典,\n\n #+ 这样可以加速数据查询, 因为在内存里查找比在磁盘里查找快得多.\n\n E_NON_ROOT_USER=70 # 必须用root来运行.\n\n ROOTUSER_NAME=root\n\n MOUNTPT=/mnt/ramdisk\n\n SIZE=2000 # 2K 个块 (可以合适的做修改)\n\n BLOCKSIZE=1024 # 每块有1K (1024 byte) 的大小\n\n DEVICE=/dev/ram0 # 第一个 ram 设备\n\n username=`id -nu`\n\n if [ \"$username\" != \"$ROOTUSER_NAME\" ]\n\n then\n\n    echo \"Must be root to run \\\"`basename $0`\\\".\"\n\n    exit $E_NON_ROOT_USER\n\n fi\n\n   if [ ! -d \"$MOUNTPT\" ] # 测试挂载点是否已经存在了,\n\n then #+ 如果这个脚本已经运行了好几次了就不会再建这个目录了\n\n    mkdir $MOUNTPT #+ 因为前面已经建立了.\n\n fi\n\n dd if=/dev/zero of=$DEVICE count=$SIZE bs=$BLOCKSIZE\n\n   # 把RAM设备的内容用零填充.                                               \n\n   # 为何需要这么做?\n\n mke2fs $DEVICE # 在RAM设备上创建一个ext2文件系统.\n\n mount $DEVICE $MOUNTPT # 挂载设备.\n\n chmod 777 $MOUNTPT # 使普通用户也可以存取这个ramdisk.\n\n # 但是, 只能由root来缷载它.\n\n echo \"\\\"$MOUNTPT\\\" now available for use.\"\n\n # 现在 ramdisk 即使普通用户也可以用来存取文件了.\n\n # 注意, ramdisk是易失的, 所以当计算机系统重启或关机时ramdisk里的内容会消失.\n\n # 拷贝所有你想保存文件到一个常规的磁盘目录下.\n\n # 重启之后, 运行这个脚本再次建立起一个 ramdisk.\n\n # 仅重新加载 /mnt/ramdisk 而没有其他的步骤将不会正确工作.\n\n # 如果加以改进, 这个脚本可以放在 /etc/rc.d/rc.local,\n\n #+ 以使系统启动时能自动设立一个ramdisk.\n\n # 这样很合适速度要求高的数据库服务器.\n\n exit 0",[[1534401478812,["Administrator@Tielemao",[[1,47,"\n"]],[46,46],[47,47]]],[1534401480794,["Administrator@Tielemao",[[1,46,"http://blog.sina.com.cn/s/blog_8b5bb24f01016y3o.html"]],[46,46],[98,98]]],[1534401482667,["Administrator@Tielemao",[[1,46,"\n"]],[45,45],[46,46]]],[1534401485865,["Administrator@Tielemao",[[-1,101,"(2012-07-25 18:08:36)\n\n| 标签：\n\n### [it](http://search.sina.com.cn/?c=blog&q=it&by=tag)\n\n | 分类： [linux](http://blog.sina.com.cn/s/articlelist_2338042447_6_1.html) |"]],[101,263],[101,101]]],[1534401486354,["Administrator@Tielemao",[[-1,102,"\n"]],[101,101],[100,100]]],[1534401486816,["Administrator@Tielemao",[[-1,101,"\n"]],[100,100],[99,99]]]],null,"Administrator@Tielemao"]]}