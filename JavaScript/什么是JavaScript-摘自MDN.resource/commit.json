{"compress":true,"commitItems":[["a01fce1a-6ea6-4554-8065-c9cf1d4c6145",1528127317621,"",[[1528127300687,["Administrator@Tielemao",[[1,0,"*   [跳转至主要内容](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript#content)\n*   [选择语言](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript#language)\n*   [跳到搜索](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript#q)\n\n[MDN Web 文档](https://developer.mozilla.org/zh-CN/)\n\n*   [技术 ](https://developer.mozilla.org/zh-CN/docs/Web)\n\n*   [参考和指引 ](https://developer.mozilla.org/zh-CN/docs/Learn)\n\n*   [反馈 ](https://developer.mozilla.org/zh-CN/docs/MDN/Feedback)\n\n*   [工具](https://developer.mozilla.org/zh-CN/docs/MDN/Doc_status)\n\n*   [![tielemao](https://secure.gravatar.com/avatar/3a050999822a572365d53f7c3808f1a0?s=50&r=pg&d=https%3A%2F%2Fdeveloper.mozilla.org%2Fstatic%2Fimg%2Favatar.png) ](https://developer.mozilla.org/zh-CN/profiles/tielemao)\n\n搜索搜索\n\n*   语言\n\n*   [ 编辑](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript$edit)\n\n*   关注\n\n*   高级\n\n[Learn web development](https://developer.mozilla.org/en-US/docs/Learn)\n\n# 什么是JavaScript？\n\n跳转到：\n\n1.  [一个高水平的定义](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript#%E4%B8%80%E4%B8%AA%E9%AB%98%E6%B0%B4%E5%B9%B3%E7%9A%84%E5%AE%9A%E4%B9%89)\n2.  [所以它实际上可以做什么？](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript#%E6%89%80%E4%BB%A5%E5%AE%83%E5%AE%9E%E9%99%85%E4%B8%8A%E5%8F%AF%E4%BB%A5%E5%81%9A%E4%BB%80%E4%B9%88%EF%BC%9F)\n3.  [JavaScript 在你的页面上做什么？](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript#JavaScript_%E5%9C%A8%E4%BD%A0%E7%9A%84%E9%A1%B5%E9%9D%A2%E4%B8%8A%E5%81%9A%E4%BB%80%E4%B9%88%EF%BC%9F)\n4.  [怎样向你的页面添加 JavaScript？](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript#%E6%80%8E%E6%A0%B7%E5%90%91%E4%BD%A0%E7%9A%84%E9%A1%B5%E9%9D%A2%E6%B7%BB%E5%8A%A0_JavaScript%EF%BC%9F)\n5.  [注释](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript#%E6%B3%A8%E9%87%8A)\n6.  [总结](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript#%E6%80%BB%E7%BB%93)\n\n[ Overview: First steps](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps)[下一页 ](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/A_first_splash)\n\n欢迎来到 MDN JavaScript 初学者的课程！ 在第一篇文章中，我们将会站在一定的高度来俯看 JavaScript，回答一些像“它是什么？”和“它能做什么？”的问题 。并确保你熟悉 JavaScript 的用途。\n\n|  预备知识: | 电脑基础知识，了解基本的 HTML 和 CSS 。 |\n| 目标: | 熟练掌握什么是 JavaScript，它能做什么，和它如何嵌入到一个网站中。 |\n\n## 一个高水平的定义[Edit](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript$edit#%E4%B8%80%E4%B8%AA%E9%AB%98%E6%B0%B4%E5%B9%B3%E7%9A%84%E5%AE%9A%E4%B9%89)\n\nJavaScript 是允许你在网页中实现复杂事情的一门编程语言 —— 每次当你浏览网页时不只是显示静态信息—— 显示即时更新的内容， 或者交互式的地图，或 2D/3D 图形动画，又或者自动播放视频等，你可以确信，JavaScript 参与其中。这是 Web技术的三层蛋糕标准，其中的两个（ [HTML ](https://developer.mozilla.org/en-US/docs/Learn/HTML)和 [CSS ](https://developer.mozilla.org/en-US/docs/Learn/CSS)）我们在 学习中心（[Learning Area](https://developer.mozilla.org/en-US/docs/Learn)）的其他部分有更多的细节。 \n\n![](https://mdn.mozillademos.org/files/13502/cake.png)\n\n*   [HTML](https://developer.mozilla.org/en-US/docs/Glossary/HTML \"HTML: HTML (HyperText Markup Language) is a descriptive language that specifies webpage structure.\")是一种标记语言，用来结构化我们的网页内容和赋予内容含义，例如定义段落、标题、和数据表,或在页面中嵌入图片和视频。\n*   [CSS](https://developer.mozilla.org/en-US/docs/Glossary/CSS \"CSS: CSS (Cascading Style Sheets) is a declarative language that controls how webpages look in the browser.\") 是一种样式规则语言，我们将样式应用于我们的 HTML 内容， 例如设置背景颜色和字体，在多个列种布局我们的内容。\n*   [JavaScript](https://developer.mozilla.org/en-US/docs/Glossary/JavaScript \"JavaScript: JavaScript (JS) is a programming language mostly used to dynamically script webpages on the client side, but it is also often utilized on the server-side, using packages such as Node.js.\") 是一种编程语言，允许你创建动态更新的内容，控制多媒体，图像动画，和一些其他的东西。好吧，虽然不是一切，但是它的神奇之处是你能够用几行JavaScript代码就能实现。\n\n这三个层次规矩地建立在彼此之上。让我们用一个简单的文本标签作为例子。我们可以用 HTML 来标记它，以赋予它结构和目的：\n\n```html\n<p>Player 1: Chris</p>\n```\n\n![](https://mdn.mozillademos.org/files/13422/just-html.png)\n\n然后我们可以加上一点 CSS 来使它看起来更好：\n\n```css\np {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n```\n\n![](https://mdn.mozillademos.org/files/13424/html-and-css.png)\n\n而最后，我们可以加上一些 JavaScript 来实现动态行为：\n\n```js\nvar para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n```\n\n尝试点击文本标签，观察会发生什么（同时注意，你可以在 GitHub 上找到这个演示—— [源代码](https://github.com/mdn/learning-area/blob/master/javascript/introduction-to-js-1/what-is-js/javascript-label.html)，或者 [实时运行](http://mdn.github.io/learning-area/javascript/introduction-to-js-1/what-is-js/javascript-label.html)）！\n\nJavaScript 可以做比这更多的东西——让我们详细探索它可以做些什么。\n\n## 所以它_实际上_可以做什么？[Edit](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript$edit#%E6%89%80%E4%BB%A5%E5%AE%83%E5%AE%9E%E9%99%85%E4%B8%8A%E5%8F%AF%E4%BB%A5%E5%81%9A%E4%BB%80%E4%B9%88%EF%BC%9F)\n\nJavaScript 语言的核心包含一些普遍的编程特点，以让你可以做到如下的事情：\n\n*   在变量中储存有用的值。以上面的演示做例子，我们请求输入一个新的名字，然后把那个名字储存到一个叫 `name` 的变量.\n*   对一段文本（在编程中被称为“字符串”）进行操作。在上面的例子中，我们取出字符串 \"Player 1: \"，然后把它和 name 变量连结起来，创造出完整的文本标签，例：''Player 1: Chris\"。\n*   运行代码以响应在网页中发生的特定事件。在上述的例子中，我们用了一个 `[click](https://developer.mozilla.org/zh-CN/docs/Web/Reference/Events/click \"/zh-CN/docs/Web/Reference/Events/click\")` 事件来检测按钮什么时候被点击，然后运行更新文本标签的代码。\n*   以及更多！\n\n然而更令人兴奋的是建立在 JavaScript 语言的核心之上的功能。在你的 JavaScript 代码里，被称为**应用程序编程接口 [Application Programming Interfaces** (**APIs)] **的功能会提供额外的超能力给你使用。\n\nAPIs 是已经建立好的一套代码组件，目的是让开发者可以实现除此之外很难甚至不可能实现的程序。它们的作用就像是已经制作好的家具套件对家居建设的作用一样——从一堆已经切好的木板开始组装一个书柜，显然比自己设计，寻找合适的木材，裁切至合适的大小和形状，找到合适大小的螺丝钉，然后组装成一个书柜要简单得多。\n\n它们 (APIs) 通常分成两个分类。\n\n![](https://mdn.mozillademos.org/files/13508/browser.png)\n\n**浏览器 APIs (Browser APIs)** 已经安装在你的网页浏览器中，而且能够从周围的计算机环境中揭露数据，或者做有用的复杂事情。举个例子：\n\n*   文档对象模型 API [[DOM (Document Object Model) API](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model)] 允许你操作 HTML 和 CSS，创建，移除和修改 HTML，动态地应用新的样式到你的页面，等等。比如说每次你在一个页面里看到一个弹出窗口，或者显示一些新的内容（像我们在上面的简单演示中看到那样），这就是 DOM 在运作。\n*   地理定位 API [[Geolocation API](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation)] 获取地理信息。这就是为什么谷歌地图 [[Google Maps](https://www.google.com/maps)] 可以找到你的位置，而且标示在地图上。\n*   画布 [[Canvas](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API)] 和 [WebGL](https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API) APIs 允许你创建生动的 2D 和 3D 图像。人们正运用这些网页技术进行一些令人惊叹的事情——比如说 [Chrome Experiments](https://www.chromeexperiments.com/webgl) 和 [webglsamples](http://webglsamples.org/)。\n*   音像和影像 APIs [[Audio and Video APIs](https://developer.mozilla.org/en-US/Apps/Fundamentals/Audio_and_video_delivery)]，像 [`HTMLMediaElement`](https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement \"从父级元素 HTML 元素继承属性\") 和 [WebRTC](https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API) 允许你运用多媒体去做一些非常有趣的事情，比如在网页中播放音像和影像，或者从你的网页摄像头中获取获取录像，然后在其他人的电脑上展示（尝试我们的简单快照演示 [[Snapshot demo](http://chrisdavidmills.github.io/snapshot/)] 以理解这个概念）。\n\n**Note**: 上述的很多演示都不能在旧的浏览器中运行——当进行实验时，在现代浏览器，像 Firefox, Chrome, Edge 或者 Opera，中运行会是一个好的想法。当你接近交付产品代码时，你会需要更深入地去考虑跨平台测试 [[cross browser testing](https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing)]（例：现实客户会使用的实际代码）。\n\n**第三方 APIs (Third party APIs)** 默认是没有安装到浏览器中的，而你通常需要从网络上的某些地方取得它们的代码和信息。举个例子：\n\n*   推特 API [[Twitter API](https://dev.twitter.com/overview/documentation)] 允许你做一些像是在你的网站上展示你的最新推送之类的事情。\n*   谷歌地图 API [[Google Maps API](https://developers.google.com/maps/)] 允许你去嵌入定制的地图到你的网站，和其他的功能。\n\n**Note**: 这些 APIs 是高级的，而我们不会在课程中涉及任何的这些 APIs，但是如果你想了解更多，上述的链接提供延展的文档供参考。\n\n这里还有更多可用的东西！然而，不要这么快就感到太过兴奋。你不可能只通过 24 小时的 JavaScript 学习，就能够构建下一个 Facebook, Google Maps 或者 Instagram——这里有很多的基础需要优先覆盖。而这就是为什么你在这里——让我们继续前进！\n\n## JavaScript 在你的页面上做什么？[Edit](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript$edit#JavaScript_%E5%9C%A8%E4%BD%A0%E7%9A%84%E9%A1%B5%E9%9D%A2%E4%B8%8A%E5%81%9A%E4%BB%80%E4%B9%88%EF%BC%9F)\n\n在这我们会开始确实地查看一些代码，而在这样做的同时，探索当你在你的页面上运行 JavaScript 的时候实际发生了什么。\n\n让我们简单地回顾当你在浏览器中读取一个网页时发生什么（在文章 [How CSS works](https://developer.mozilla.org/en-US/Learn/CSS/Introduction_to_CSS/How_CSS_works#How_does_CSS_actually_work) 中第一次谈及到）。 当你在浏览器中读取一个网页，你在一个实行环境（浏览器标签）中运行你的代码（HTML, CSS 和 JavaScript）。这就像是一个工厂，获取原材料（代码）然后出产一个产品（网页）。\n\n![](https://mdn.mozillademos.org/files/13504/execution.png)\n\n在 HTML 和 CSS 已经被集合和组装成一个网页后，浏览器的 JavaScript 引擎执行 JavaScript。这保证了当 JavaScript 开始运行时，网页的结构和样式已经在该出现的地方了。\n\n这是一个好事情，正如 JavaScript 的普遍用处是通过 DOM API（如之前提及的那样）动态地修改 HTML 和 CSS 来更新用户交界面。如果 JavaScript 在 HTML 和 CSS 加载完成之前加载运行，那么会发生错误。\n\n### 浏览器安全\n\n每个浏览器标签本身就是一个用来运行代码的分离的容器（这些容器用专业术语称为“运行环境”）——这意味着在大多数情况中，每个标签中的代码是完全分离地运行，而且在一个标签中的代码不能直接影响在另一个标签中的代码——或者在另一个网站中的。这是一个好的安全措施——如果不是这样的话，那么海盗们就可以开始写从其他网站偷取信息的代码，和其他像这样的坏事。\n\n**Note**: 这里有安全的方式去在不同网站/标签中传送代码和数据，但这些方法是高级的技术，而我们不会在这门课里覆盖这些。\n\n### JavaScript 运行顺序\n\n当浏览器遇到一块 JavaScript 代码时，它通常会按顺序运行这代码块，从上往下。这意味着你需要注意你放置代码的顺序。举个例子，让我们回到我们在第一个例子中看到的 JavaScript 代码块：\n\n```js\nvar para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n```\n\n在这里我们正选定一个文本段落 (line 1)，然后给它附上一个事件监听器 (line 3) 使得当这个段落被点击时，`updateName()` 代码块 (lines 5–8) 会被运行。`updateName()` 代码块（这类可以重复使用的代码块被称为“函数”）向用户请求一个新的名字，然后把这个名字插入到段落中以更新显示。\n\n如果你互换了代码里最初两行的顺序，它将不会工作——取而代之的是，你会在浏览器的开发者控制台中得到一个错误——TypeError: para is undefined [类型错误：para没有被定义]。这意味着 para 对象还不存在，所以我们不能为它增添一个事件监听器。\n\n**Note**: 这是一个很常见的错误——你需要注意在尝试对你的代码中引用的对象进行操作前，它已经存在。\n\n### 解释代码 vs 编译代码\n\n在编程环境中，你或许听说过这两个术语 **解释 [****interpreted]** 和 **编译 [compiled]**。JavaScript 是一个解释语言——代码从上到下运行，而运行的结果会马上被返回。在浏览器运行代码前，你不必先把它转化为其他形式。\n\n另一方面来说，编译语言则需要在运行前转化为另一种形式。比如说 C/C++ 则要先被编译成汇编语言，然后再由电脑运行。\n\n两种方式都有不同的优势，然而就目前而言，我们不会谈论这些。\n\n### 服务器端代码 vs 客户端代码\n\n你或许也听说过 **服务器端 [server-side] **和 **客户端 [client-side] **代码这两个术语，尤其是在网页开发的语境中。客户端代码是在用户的电脑上运行的代码——当浏览一个网页时，这个网页的客户端代码就会被下载，然后由浏览器来运行和展示。在这个 JavaScript 模块，我们将会明确地探讨 **客户端 JavaScript [client-side JavaScript****]**。\n\n在另一方面，服务器端代码则在服务器上运行，然后它的结果会由浏览器进行下载和展示。流行的服务器端网页语言包含以下几个例子：PHP, Python, Ruby, ASP.NET 和 JavaScript！JavaScript 同时也能用作服务器端语言，比如说在流行的 Node.js 环境中——你可以在我们的 [动态网页 - 服务器端编程 [Dynamic Websites – Server-side programming]](https://developer.mozilla.org/en-US/docs/Learn/Server-side) 主题中找到更多关于服务器端 JavaScript 的知识。\n\n**动态 [****dynamic]** 这个词被用来描述客户端 JavaScript 和服务器端语言——它指的是能更新网页/应用的内容以在不同环境下显示不同事物，当有需要时产生新内容的能力。服务器端代码会动态地在服务器上产生新的内容，比如说从数据库中提取信息。反之，客户端 JavaScript则在用户的浏览器中动态地生成新的内容，比如说创建一个新的 HTML 表格，从中插入从服务器请求到的数据，然后在已经向用户展示了的网页中显示这个表格。在这两个语境中，动态的意义有细微的不同，但是有联系，而且两种方法（服务器端和客户端）通常是在一起工作的。\n\n一个没有动态更新内容的网页被指作 **静态 [****static]** ——它只会一直显示一样的内容。\n\n## 怎样向你的页面添加 JavaScript？[Edit](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript$edit#%E6%80%8E%E6%A0%B7%E5%90%91%E4%BD%A0%E7%9A%84%E9%A1%B5%E9%9D%A2%E6%B7%BB%E5%8A%A0_JavaScript%EF%BC%9F)\n\nJavaScript 以一种近似于 CSS 的方式应用到你的 HTML 页面中。尽管 CSS 使用 [`<link>`](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/link \"HTML 中<link>元素指定了外部资源与当前文档的关系。 这个元素的用途包括为导航定义一个关系框架。这个元素经常用来链接样式表（如CSS文件）。\") 元素去应用外部的样式表 [stylesheet] 和 [`<style>`](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/style \"HTML的<style>元素包含了文档的样式化信息或者文档的一部分，该标签的样式信息通常是CSS的格式。\") 元素去应用内部的样式表到 HTML，JavaScript 只需要在 HTML 世界里的一个元素—— [`<script>`](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script \"HTML <script> 元素用于嵌入或引用可执行脚本。\") 元素。让我们学习一下它怎么工作。\n\n### 内部的 JavaScript\n\n1.  首先，复制我们的范例文件 [apply-javascript.html](https://github.com/mdn/learning-area/blob/master/javascript/introduction-to-js-1/what-is-js/apply-javascript.html) 到本地。储存到一个可以察觉的目录中。\n2.  在你的浏览器和文本编辑器中打开这个文件。你会看到这个 HTML 创建了一个包含了一个可点击按钮的简单网页。\n3.  `然后，在你的文本编辑器里，在你的结束 </body>` 标签前接上以下代码：\n\n    ```html\n    <script>\n\n      // JavaScript goes here\n\n    </script>\n    ```\n\n4.  现在我们会在我们的 [`<script>`](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script \"HTML <script> 元素用于嵌入或引用可执行脚本。\") 元素中加上一些 JavaScript 来让这个页面做一些更有趣的东西——在 \"// JavaScript goes here\" 这一行下面加上以下代码：\n\n    ```js\n    function createParagraph() {\n      var para = document.createElement('p');\n      para.textContent = 'You clicked the button!';\n      document.body.appendChild(para);\n    }\n\n    var buttons = document.querySelectorAll('button');\n\n    for(var i = 0; i < buttons.length ; i++) {\n      buttons[i].addEventListener('click', createParagraph);\n    }\n    ```\n\n5.  保存你的文件并刷新你的浏览器——现在当你点击按钮时，你应当会看到一个新的段落产生并在下方显示。\n\n**Note**: 如果你的例子看上去不能工作，再检查所有的步骤和保证你都做对了。你有把原始代码作为 `.html` 文件保存为本地复件吗？你有刚好再 </body> 标签前加上 [`<script>`](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script \"HTML <script> 元素用于嵌入或引用可执行脚本。\") 元素吗？你有确切地输入所示的 JavaScript ？ **JavaScript 是区分大小写的，而且非常的讲究，所以你需要精确地输入所示的句法，不然它可能会无法工作。**\n\n**Note**: 你可以再 GitHub 上看到这个版本 [apply-javascript-internal.html](https://github.com/mdn/learning-area/blob/master/javascript/introduction-to-js-1/what-is-js/apply-javascript-internal.html) ([see it live too](http://mdn.github.io/learning-area/javascript/introduction-to-js-1/what-is-js/apply-javascript-internal.html)).\n\n### 外部的 JavaScript\n\n这方法很不错，但要是我们想要把我们的 JavaScript 放置在一个外部文件中呢？现在让我们探索这个。\n\n1.  首先，在跟你的简单 HTML 文件的同一目录下创建一个新的文件。命名为 `script.js` ——保证它以 .js 为文件扩展名，因为这是它被认作是 JavaScript 的方式。\n2.  然后，把所有在你现在的 [`<script>`](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script \"HTML <script> 元素用于嵌入或引用可执行脚本。\") 元素中的脚本 [script] 提取出来并粘贴到 .js 文件。保存这个文件。\n3.  现在替换你的 [`<script>`](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script \"HTML <script> 元素用于嵌入或引用可执行脚本。\") 元素为如下：\n\n    ```html\n    <script src=\"script.js\"></script>\n    ```\n\n4.  保存然后刷新你的浏览器，然后你应该看到同样的东西！它工作起来是一样的，但是现在我们把 JavaScript 写进了一个外部文件。对于规划你的代码来说，这通常是一件好事，而且让它可以在多个 HTML 文件中重复使用。再加上 HTML 中没有一大堆脚本的话，HTML 会更容易阅读。\n\n**Note**: 你可以在 GitHub 上看到这个版本 as [apply-javascript-external.html](https://github.com/mdn/learning-area/blob/master/javascript/introduction-to-js-1/what-is-js/apply-javascript-external.html) and [script.js](https://github.com/mdn/learning-area/blob/master/javascript/introduction-to-js-1/what-is-js/script.js) ([see it live too](http://mdn.github.io/learning-area/javascript/introduction-to-js-1/what-is-js/apply-javascript-external.html)).\n\n### 内联 JavaScript 处理器\n\n注意，有时候你会遇到在 HTML 中存在着一丝真实的 JavaScript 代码。它或许看上去会像这样：\n\n```js\nfunction createParagraph() {\n  var para = document.createElement('p');\n  para.textContent = 'You clicked the button!';\n  document.body.appendChild(para);\n}\n```\n\n```html\n<button onclick=\"createParagraph()\">Click me!</button>\n```\n\n你可以在下面尝试这个版本的演示。\n\n这个演示有着跟前两节的演示一模一样的功能，除了 [`<button>`](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/button \"HTML <button> 元素表示一个可点击的按钮，可以用在表单或文档其它需要使用简单标准按钮的地方。\") 元素中包含了一个内联的 `onclick` 处理器以至于函数会在按钮被按下时运行。\n\n**然而请不要这样做。** 这是一个用 JavaScript 来污染你的 HTML 的坏实践，而且它还不高效——你会需要在每个想要 JavaScript 应用到的按钮上包含 `onclick=\"createParagraph()\"` 属性。\n\n使用一个纯 JavaScript 结构允许你使用一个指令来选取所有的按钮。我们在上面实现这一目的的代码看上去是这样的：\n\n```html\nvar buttons = document.querySelectorAll('button');\n\nfor(var i = 0; i < buttons.length ; i++) {\n  buttons[i].addEventListener('click', createParagraph);\n}\n```\n\n这或许看上去比 `onclick` 属性要长一些，但是这会应用于所有的按钮，无论页面上有多少个，和有多少个按钮被添加或者移除。不需要对 JavaScript 进行任何修改。\n\n**Note**: 尝试编辑你自己的 `apply-javascript.html` 版本并在文件中加上更多的按钮。当你重新加载时，你应该会发现所有的按钮被按下时都会创建一个段落。很简洁，不是吗？\n\n## 注释[Edit](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript$edit#%E6%B3%A8%E9%87%8A)\n\n正如使用 HTML 和 CSS 一样，在你的 JavaScript 代码中书写会被浏览器忽略掉的注释是可行的，并且注释只用来为你的开发者同事提供关于代码如何工作的指引（包括你，如果你在 6 个月后回到你的代码并忘记了你做过些什么）。注释非常有用，而且你应该经常使用它们，尤其是在更大的应用程序中。这里有两类注释：\n\n*   一个单行注释书写在一个双正斜杠后 (//)，比如：\n\n    ```js\n    // I am a comment\n    ```\n\n*   一个多行注释书写在字符串 /* 和 */ 之间， 比如：\n\n    ```js\n    /*\n      I am also\n      a comment\n    */\n    ```\n\n所以举例说，我们可以用 “注释” 来为我们上一个演示的 JavaScript 注释：\n\n```js\n// Function: creates a new paragraph and append it to the bottom of the HTML body.\n\nfunction createParagraph() {\n  var para = document.createElement('p');\n  para.textContent = 'You clicked the button!';\n  document.body.appendChild(para);\n}\n\n/*\n  1\\. Get references to all the buttons on the page and soter them in an array.\n  2\\. Loop through all the buttons and add a click event listener to each one.\n\n  When any button is pressed, the createParagraph() function will be run.\n*/\n\nvar buttons = document.querySelectorAll('button');\n\nfor(var i = 0; i < buttons.length ; i++) {\n  buttons[i].addEventListener('click', createParagraph);\n}\n```\n\n## 总结[Edit](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript$edit#%E6%80%BB%E7%BB%93)\n\n所以你到这里了，你在 JavaScript 世界中的第一步。我们仅仅从理论开始，让你熟悉为什么你会使用 JavaScript，和你可以用它做什么事情。在这过程中你看到了一些代码示例并且学习到了 JavaScript 是如何与你网站中的其他代码适配的。\n\nJavaScript 现在或许看上去有一点令人畏惧，但不用担心——在这门课中我们会逐步地引领你。在下一篇文章我们会[全心投入到实践](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Introduction_to_JavaScript_1/A_first_splash)，让你专注其中并建立你自己的 JavaScript 例子。\n\n[ Overview: First steps](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps)[下一页 ](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/A_first_splash)\n\n## 文档标签和贡献者\n\n **此页面的贡献者：** [canon](https://developer.mozilla.org/zh-CN/profiles/canon), [GaoShanghui](https://developer.mozilla.org/zh-CN/profiles/GaoShanghui), [GreyWalker](https://developer.mozilla.org/zh-CN/profiles/GreyWalker), [hexianzhi](https://developer.mozilla.org/zh-CN/profiles/hexianzhi), [nianxiaoge](https://developer.mozilla.org/zh-CN/profiles/nianxiaoge), [ithinktherforeiam](https://developer.mozilla.org/zh-CN/profiles/ithinktherforeiam), [cruiserdou](https://developer.mozilla.org/zh-CN/profiles/cruiserdou), [GHLgh](https://developer.mozilla.org/zh-CN/profiles/GHLgh), [eforegist](https://developer.mozilla.org/zh-CN/profiles/eforegist)\n\n **最后编辑者:** [canon](https://developer.mozilla.org/zh-CN/profiles/canon), Nov 21, 2017, 12:57:15 AM\n\n1.  [学习 Web 开发 ](https://developer.mozilla.org/zh-CN/docs/learn)\n2.  [JavaScript](https://developer.mozilla.org/zh-CN/docs/learn/JavaScript)\n3.  [JavaScript 第一步 ](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps)\n4.  什么是JavaScript？\n\n相关主题\n\n1.  [**新手请从这开始！**](https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web)\n2.  [Web 入门](https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web)\n3.  [**HTML — 构建 Web**](https://developer.mozilla.org/zh-CN/docs/Learn/HTML)\n4.  [HTML 介绍](https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Introduction_to_HTML)\n5.  [多媒体与嵌入](https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Multimedia_and_embedding)\n6.  [HTML 表格](https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Tables)\n7.  [HTML 表单](https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Forms)\n8.  [**CSS — 设计 Web**](https://developer.mozilla.org/zh-CN/docs/Learn/CSS)\n9.  [CSS 介绍](https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Introduction_to_CSS)\n10.  [样式化文字](https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Styling_text)\n11.  [样式化区块](https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Styling_boxes)\n12.  [CSS 排版概述](https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout)\n13.  [**JavaScript — 用户端动态脚本**](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript)\n14.  [JavaScript 第一步](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps)\n    1.  [JavaScript 第一步概述](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps)\n    2.  [什么是 JavaScript？](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript)\n    3.  [初次接触 JavaScript](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/A_first_splash)\n    4.  [出现了什么问题？JavaScript 疑难解答](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_went_wrong)\n    5.  [储存你所需的信息 — 变量](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Variables)\n    6.  [JavaScript 基础概念 — 数字与运算符](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Math)\n    7.  [处理文字 — JavaScript 中的字符串](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Strings)\n    8.  [有用的字符串方法](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Useful_string_methods)\n    9.  [数组](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Arrays)\n    10.  [作业：傻瓜故事产生器](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Silly_story_generator)\n15.  [JavaScript 基础要件](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Building_blocks)\n16.  [JavaScript 对象介绍](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects)\n17.  [客户端网页 API](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs)\n18.  [**可访问性 — 使每个人都能使用 Web**](https://developer.mozilla.org/zh-CN/docs/Learn/Accessibility)\n19.  [可访问性指南](https://developer.mozilla.org/zh-CN/docs/Learn/Accessibility)\n20.  [可访问性测评](https://developer.mozilla.org/zh-CN/docs/Learn/Accessibility)\n21.  [**工具与测试**](https://developer.mozilla.org/zh-CN/docs/Learn/Tools_and_testing)\n22.  [跨浏览器测试](https://developer.mozilla.org/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing)\n23.  [**服务端网页编程**](https://developer.mozilla.org/zh-CN/docs/Learn/Server-side)\n24.  [第一步](https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/First_steps)\n25.  [Django 网站框架 (Python)](https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/Django)\n26.  [Express 网页框架 (node.js/JavaScript)](https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/Express_Nodejs)\n27.  [**更多资源**](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript#)\n28.  [高级学习材料](https://developer.mozilla.org/zh-CN/docs/Learn/Other_learning_material)\n29.  [常见问题](https://developer.mozilla.org/zh-CN/docs/Learn/Common_questions)\n30.  [如何贡献](https://developer.mozilla.org/zh-CN/docs/Learn/How_to_contribute)\n\n这篇文章需要如下复核：\n\n*   [x] 文法 - 措辞、语法或内容。[能来帮忙吗？](https://developer.mozilla.org/docs/MDN/Contribute/Howto/Do_an_editorial_review)\n\n保存\n\n## 学习 Web 开发的最佳实践\n\n让 MDN 将最新、最棒的内容直接投递到您的邮箱。\n\n目前仅提供英文版新闻报。\n\n电子邮件地址\n\n立即注册\n\n隐藏新闻报注册\n\n[MDN Web 文档](https://developer.mozilla.org/zh-CN/)\n\n## MDN\n\n*   [网络技术](https://developer.mozilla.org/zh-CN/docs/Web)\n*   [了解 Web 开发](https://developer.mozilla.org/zh-CN/docs/Learn)\n*   [关于 MDN](https://developer.mozilla.org/docs/MDN/About)\n*   [反馈](https://developer.mozilla.org/zh-CN/docs/MDN/Feedback)\n*   [](https://twitter.com/mozdevnet)\n\n*   [](https://github.com/mdn/)\n\n[Mozilla](https://mozilla.org/)\n\n## Mozilla\n\n*   [关于](https://www.mozilla.org/about/)\n*   [联系我们](https://www.mozilla.org/contact/)\n*   [Firefox](https://www.mozilla.org/firefox/?utm_source=developer.mozilla.org&utm_campaign=footer&utm_medium=referral)\n*   [](https://twitter.com/mozilla)\n\n*   [](https://www.facebook.com/mozilla)\n\n*   [](https://www.instagram.com/mozillagram/)\n\n其他语言：                    中文 (简体) (zh-CN)                                          English (US) (en-US)                                   Čeština (cs)                                   Deutsch (de)                                   Español (es)                                   Français (fr)                                   Italiano (it)                                   日本語 (ja)                                   한국어 (ko)                                   Nederlands (nl)                                   Polski (pl)                                   Português (do Brasil) (pt-BR)                                   Português (Europeu) (pt-PT)                                   Română (ro)                                   Русский (ru)                                   Српски (sr)                                   正體中文 (繁體) (zh-TW)                  \n\n*   [条款](https://www.mozilla.org/about/legal/terms/mozilla)\n\n*   [隐私](https://www.mozilla.org/privacy/websites/)\n\n*   [Cookie](https://www.mozilla.org/privacy/websites/#cookies)\n\n© 2005-2018 Mozilla 及各贡献者\n\n内容可按[这些许可协议](https://developer.mozilla.org/en-US/docs/MDN/About#Copyrights_and_licenses)使用。"]],[0,0],[24230,24230]]],[1528127309314,["Administrator@Tielemao",[[-1,0,"*   [跳转至主要内容](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript#content)\n*   [选择语言](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript#language)\n*   [跳到搜索](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript#q)\n\n[MDN Web 文档](https://developer.mozilla.org/zh-CN/)\n\n*   [技术 ](https://developer.mozilla.org/zh-CN/docs/Web)\n\n*   [参考和指引 ](https://developer.mozilla.org/zh-CN/docs/Learn)\n\n*   [反馈 ](https://developer.mozilla.org/zh-CN/docs/MDN/Feedback)\n\n*   [工具](https://developer.mozilla.org/zh-CN/docs/MDN/Doc_status)\n\n*   [![tielemao](https://secure.gravatar.com/avatar/3a050999822a572365d53f7c3808f1a0?s=50&r=pg&d=https%3A%2F%2Fdeveloper.mozilla.org%2Fstatic%2Fimg%2Favatar.png) ](https://developer.mozilla.org/zh-CN/profiles/tielemao)\n\n搜索搜索\n\n*   语言\n\n*   [ 编辑](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript$edit)\n\n*   关注\n\n*   高级\n\n[Learn web development](https://developer.mozilla.org/en-US/docs/Learn)"],[1,1057,""],[-1,2157," "],[1,2158," "],[-1,2255," "],[1,2256," "],[-1,2459," "],[1,2460," "],[-1,2765," "],[1,2766," "],[-1,2878," "],[1,2879," "],[-1,2884," "],[1,2885," "],[-1,2940," "],[1,2941," "],[-1,2945," "],[1,2946," "],[-1,3085," "],[1,3086," "],[-1,3542," "],[1,3543," "],[-1,3573," "],[1,3574," "],[-1,3816," "],[1,3817," "],[-1,3879," "],[1,3880," "],[-1,4877," "],[1,4878," "],[-1,5001," "],[1,5002," "],[-1,5476," "],[1,5477," "],[-1,5483," "],[1,5484," "],[-1,5634," "],[1,5635," "],[-1,5754," "],[1,5755," "],[-1,5901," "],[1,5902," "],[-1,5911," "],[1,5912," "],[-1,6192," "],[1,6193," "],[-1,6366," "],[1,6367," "],[-1,6573," "],[1,6574," "],[-1,6591," "],[1,6592," "],[-1,6636," "],[1,6637," "],[-1,6734," 和 "],[1,6737," 和 "],[-1,6804," "],[1,6805," "],[-1,6857," "],[1,6858," "],[-1,6919," 和 "],[1,6922," 和 "],[-1,7085," "],[1,7086," "],[-1,7179," "],[1,7180," "],[-1,7193," 和 "],[1,7196," 和 "],[-1,7265," "],[1,7266," "],[-1,7404," "],[1,7405," "],[-1,7462," "],[1,7463," "],[-1,7487," "],[1,7488," "],[-1,7534," "],[1,7535," "],[-1,7698," "],[1,7699," "],[-1,7820," "],[1,7821," "],[-1,7919," "],[1,7920," "],[-1,8482," "],[1,8483," "],[-1,8606," "],[1,8607," "],[-1,8616," "],[1,8617," "],[-1,8820," "],[1,8821," "],[-1,8952," "],[1,8953," "],[-1,9611," "],[1,9612," "],[-1,9647," 代码块 "],[1,9652," 代码块 "],[-1,9683," "],[1,9684," "],[-1,9944," "],[1,9945," "],[-1,9969," "],[1,9970," "],[-1,9994," 和 "],[1,9997," 和 "],[-1,10202," "],[1,10203," "],[-1,10223," **和 "],[1,10228," **和 "],[-1,10247," "],[1,10248," "],[-1,10356," "],[1,10357," "],[-1,10559," "],[1,10560," "],[-1,10680," "],[1,10681," "],[-1,10732," "],[1,10733," "],[-1,11004," "],[1,11005," "],[-1,11024," "],[1,11025," "],[-1,11288," "],[1,11289," "],[-1,11313," "],[1,11314," "],[-1,11320," "],[1,11321," "],[-1,11426," "],[1,11427," "],[-1,11472," "],[1,11473," "],[-1,11499," "],[1,11500," "],[-1,11631," "],[1,11632," "],[-1,11665," "],[1,11666," "],[-1,11681," "],[1,11682," "],[-1,11774," "],[1,11775," "],[-1,11792," "],[1,11793," "],[-1,11847," "],[1,11848," "],[-1,11986," "],[1,11987," "],[-1,12087," "],[1,12088," "],[-1,12096," "],[1,12097," "],[-1,12202," "],[1,12203," "],[-1,12295," "],[1,12296," "],[-1,12313," "],[1,12314," "],[-1,12861," "],[1,12862," "],[-1,12869," "],[1,12870," "],[-1,12900," "],[1,12901," "],[-1,12993," "],[1,12994," "],[-1,13011," "],[1,13012," "],[-1,13026," "],[1,13027," "],[-1,13039," "],[1,13040," "],[-1,13114," "],[1,13115," "],[-1,13129," "],[1,13130," "],[-1,13286," "],[1,13287," "],[-1,13457," "],[1,13458," "],[-1,13532," "],[1,13533," "],[-1,13544," "],[1,13545," "],[-1,13551," "],[1,13552," "],[-1,13604," "],[1,13605," "],[-1,13697," "],[1,13698," "],[-1,13715," "],[1,13716," "],[-1,13740," "],[1,13741," "],[-1,13766," "],[1,13767," "],[-1,13859," "],[1,13860," "],[-1,13877," "],[1,13878," "],[-1,14104," "],[1,14105," "],[-1,14122," "],[1,14123," "],[-1,14279," and "],[1,14284," and "],[-1,14398," "],[1,14399," "],[-1,14580," "],[1,14581," "],[-1,14884," "],[1,14885," "],[-1,15018," "],[1,15019," "],[-1,15030," "],[1,15031," "],[-1,15040," "],[1,15041," "],[-1,15075," "],[1,15076," "],[-1,15148," "],[1,15149," "],[-1,15178," "],[1,15179," "],[-1,15189," "],[1,15190," "],[-1,15419," "],[1,15420," "],[-1,15429," "],[1,15430," "],[-1,15518," "],[1,15519," "],[-1,15542," "],[1,15543," "],[-1,15738," "],[1,15739," "],[-1,15905," "],[1,15906," "],[-1,15973," "],[1,15974," "],[-1,15978," "],[1,15979," "],[-1,15985," "],[1,15986," "],[-1,16884," "],[1,16885," "],[-1,16925," "],[1,16926," "],[-1,17184," "],[1,17185," "],[-1,17202," "],[1,17203," "],[-1,17300," "],[1,17301," "],[-1,17403," "],[1,17404," "],[-1,17416," "],[1,17417," "],[-1,17477," "],[1,17478," "],[-1,17550," "],[1,17551," "],[-1,17621," "],[1,17622," "],[-1,17690," "],[1,17691," "],[-1,17761," "],[1,17762," "],[-1,17846," "],[1,17847," "],[-1,17917," "],[1,17918," "],[-1,17978," "],[1,17979," "],[-1,18048," "],[1,18049," "],[-1,18059," "],[1,18060," "],[-1,18120," "],[1,18121," "],[-1,18162," "],[1,18163," "],[-1,18308," "],[1,18309," "],[-1,23080,"                    "],[1,23100,"                    "],[-1,23115,"                                          "],[1,23157,"                                          "],[-1,23177,"                                   "],[1,23212,"                                   "],[-1,23224,"                                   "],[1,23259,"                                   "],[-1,23271,"                                   "],[1,23306,"                                   "],[-1,23318,"                                   "],[1,23353,"                                   "],[-1,23366,"                                   "],[1,23401,"                                   "],[-1,23414,"                                   "],[1,23449,"                                   "],[-1,23457,"                                   "],[1,23492,"                                   "],[-1,23500,"                                   "],[1,23535,"                                   "],[-1,23550,"                                   "],[1,23585,"                                   "],[-1,23596,"                                   "],[1,23631,"                                   "],[-1,23644," "],[1,23645," "],[-1,23660,"                                   "],[1,23695,"                                   "],[-1,23722,"                                   "],[1,23757,"                                   "],[-1,23768,"                                   "],[1,23803,"                                   "],[-1,23815,"                                   "],[1,23850,"                                   "],[-1,23861,"                                   "],[1,23896,"                                   "],[-1,23913,"                  "],[1,23931,"                  "]],[0,1057],[0,0]]],[1528127311629,["Administrator@Tielemao",[[-1,0,"\n"]],[2,2],[1,1]]],[1528127312157,["Administrator@Tielemao",[[-1,0,"\n"]],[1,1],[0,0]]],[1528127321151,["Administrator@Tielemao",[[1,25,"\\"],[1,203,"\\"],[1,421,"\\"],[1,641,"\\"],[1,861,"\\"],[1,979,"\\"],[1,1437,""],[-1,1485,"\n"]],[18,1486],[1491,1491]]],[1528127325282,["Administrator@Tielemao",[[-1,18,"跳转到：\n\n1\\.  [一个高水平的定义](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript#%E4%B8%80%E4%B8%AA%E9%AB%98%E6%B0%B4%E5%B9%B3%E7%9A%84%E5%AE%9A%E4%B9%89)\n2\\.  [所以它实际上可以做什么？](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript#%E6%89%80%E4%BB%A5%E5%AE%83%E5%AE%9E%E9%99%85%E4%B8%8A%E5%8F%AF%E4%BB%A5%E5%81%9A%E4%BB%80%E4%B9%88%EF%BC%9F)\n3\\.  [JavaScript 在你的页面上做什么？](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript#JavaScript_%E5%9C%A8%E4%BD%A0%E7%9A%84%E9%A1%B5%E9%9D%A2%E4%B8%8A%E5%81%9A%E4%BB%80%E4%B9%88%EF%BC%9F)\n4\\.  [怎样向你的页面添加 JavaScript？](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript#%E6%80%8E%E6%A0%B7%E5%90%91%E4%BD%A0%E7%9A%84%E9%A1%B5%E9%9D%A2%E6%B7%BB%E5%8A%A0_JavaScript%EF%BC%9F)\n5\\.  [注释](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript#%E6%B3%A8%E9%87%8A)\n6\\.  [总结](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript#%E6%80%BB%E7%BB%93)\n\n[ Overview: First steps](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps)[下一页 ](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/A_first_splash)"]],[18,1290],[18,18]]],[1528127330359,["Administrator@Tielemao",[[1,0,"\n"]],[0,0],[1,1]]],[1528127336024,["Administrator@Tielemao",[[1,0,"[[toc]]"]],[0,0],[7,7]]],[1528127337684,["Administrator@Tielemao",[[1,8,"\n"]],[7,7],[8,8]]],[1528127343008,["Administrator@Tielemao",[[-1,28,"\n"]],[28,28],[27,27]]],[1528127346909,["Administrator@Tielemao",[[-1,140,"|  预备知识: | 电脑基础知识，了解基本的 HTML 和 CSS 。 |\n| 目标: | 熟练掌握什么是 JavaScript，它能做什么，和它如何嵌入到一个网站中。 |"]],[140,227],[140,140]]],[1528127350076,["Administrator@Tielemao",[[-1,152,"[Edit](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript$edit#%E4%B8%80%E4%B8%AA%E9%AB%98%E6%B0%B4%E5%B9%B3%E7%9A%84%E5%AE%9A%E4%B9%89)"]],[152,326],[152,152]]],[1528127367369,["Administrator@Tielemao",[[-1,15823,"相关主题\n\n1.  [**新手请从这开始！**](https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web)\n2.  [Web 入门](https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web)\n3.  [**HTML — 构建 Web**](https://developer.mozilla.org/zh-CN/docs/Learn/HTML)\n4.  [HTML 介绍](https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Introduction_to_HTML)\n5.  [多媒体与嵌入](https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Multimedia_and_embedding)\n6.  [HTML 表格](https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Tables)\n7.  [HTML 表单](https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Forms)\n8.  [**CSS — 设计 Web**](https://developer.mozilla.org/zh-CN/docs/Learn/CSS)\n9.  [CSS 介绍](https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Introduction_to_CSS)\n10.  [样式化文字](https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Styling_text)\n11.  [样式化区块](https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Styling_boxes)\n12.  [CSS 排版概述](https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout)\n13.  [**JavaScript — 用户端动态脚本**](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript)\n14.  [JavaScript 第一步](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps)\n    1.  [JavaScript 第一步概述](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps)\n    2.  [什么是 JavaScript？](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript)\n    3.  [初次接触 JavaScript](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/A_first_splash)\n    4.  [出现了什么问题？JavaScript 疑难解答](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_went_wrong)\n    5.  [储存你所需的信息 — 变量](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Variables)\n    6.  [JavaScript 基础概念 — 数字与运算符](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Math)\n    7.  [处理文字 — JavaScript 中的字符串](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Strings)\n    8.  [有用的字符串方法](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Useful_string_methods)\n    9.  [数组](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Arrays)\n    10.  [作业：傻瓜故事产生器](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Silly_story_generator)\n15.  [JavaScript 基础要件](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Building_blocks)\n16.  [JavaScript 对象介绍](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects)\n17.  [客户端网页 API](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs)\n18.  [**可访问性 — 使每个人都能使用 Web**](https://developer.mozilla.org/zh-CN/docs/Learn/Accessibility)\n19.  [可访问性指南](https://developer.mozilla.org/zh-CN/docs/Learn/Accessibility)\n20.  [可访问性测评](https://developer.mozilla.org/zh-CN/docs/Learn/Accessibility)\n21.  [**工具与测试**](https://developer.mozilla.org/zh-CN/docs/Learn/Tools_and_testing)\n22.  [跨浏览器测试](https://developer.mozilla.org/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing)\n23.  [**服务端网页编程**](https://developer.mozilla.org/zh-CN/docs/Learn/Server-side)\n24.  [第一步](https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/First_steps)\n25.  [Django 网站框架 (Python)](https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/Django)\n26.  [Express 网页框架 (node.js/JavaScript)](https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/Express_Nodejs)\n27.  [**更多资源**](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript#)\n28.  [高级学习材料](https://developer.mozilla.org/zh-CN/docs/Learn/Other_learning_material)\n29.  [常见问题](https://developer.mozilla.org/zh-CN/docs/Learn/Common_questions)\n30.  [如何贡献](https://developer.mozilla.org/zh-CN/docs/Learn/How_to_contribute)\n\n这篇文章需要如下复核：\n\n*   [x] 文法 - 措辞、语法或内容。[能来帮忙吗？](https://developer.mozilla.org/docs/MDN/Contribute/Howto/Do_an_editorial_review)\n\n保存\n\n## 学习 Web 开发的最佳实践\n\n让 MDN 将最新、最棒的内容直接投递到您的邮箱。\n\n目前仅提供英文版新闻报。\n\n电子邮件地址\n\n立即注册\n\n隐藏新闻报注册\n\n[MDN Web 文档](https://developer.mozilla.org/zh-CN/)\n\n## MDN\n\n*   [网络技术](https://developer.mozilla.org/zh-CN/docs/Web)\n*   [了解 Web 开发](https://developer.mozilla.org/zh-CN/docs/Learn)\n*   [关于 MDN](https://developer.mozilla.org/docs/MDN/About)\n*   [反馈](https://developer.mozilla.org/zh-CN/docs/MDN/Feedback)\n*   [](https://twitter.com/mozdevnet)\n\n*   [](https://github.com/mdn/)\n\n[Mozilla](https://mozilla.org/)\n\n## Mozilla\n\n*   [关于](https://www.mozilla.org/about/)\n*   [联系我们](https://www.mozilla.org/contact/)\n*   [Firefox](https://www.mozilla.org/firefox/?utm_source=developer.mozilla.org&utm_campaign=footer&utm_medium=referral)\n*   [](https://twitter.com/mozilla)\n\n*   [](https://www.facebook.com/mozilla)\n\n*   [](https://www.instagram.com/mozillagram/)\n\n其他语言：                    中文 (简体) (zh-CN)                                          English (US) (en-US)                                   Čeština (cs)                                   Deutsch (de)                                   Español (es)                                   Français (fr)                                   Italiano (it)                                   日本語 (ja)                                   한국어 (ko)                                   Nederlands (nl)                                   Polski (pl)                                   Português (do Brasil) (pt-BR)                                   Português (Europeu) (pt-PT)                                   Română (ro)                                   Русский (ru)                                   Српски (sr)                                   正體中文 (繁體) (zh-TW)                  \n\n*   [条款](https://www.mozilla.org/about/legal/terms/mozilla)\n\n*   [隐私](https://www.mozilla.org/privacy/websites/)\n\n*   [Cookie](https://www.mozilla.org/privacy/websites/#cookies)\n\n© 2005-2018 Mozilla 及各贡献者\n\n内容可按[这些许可协议](https://developer.mozilla.org/en-US/docs/MDN/About#Copyrights_and_licenses)使用。"]],[15823,21651],[15823,15823]]],[1528127372241,["Administrator@Tielemao",[[-1,14811,"## 文档标签和贡献者\n\n **此页面的贡献者：** [canon](https://developer.mozilla.org/zh-CN/profiles/canon), [GaoShanghui](https://developer.mozilla.org/zh-CN/profiles/GaoShanghui), [GreyWalker](https://developer.mozilla.org/zh-CN/profiles/GreyWalker), [hexianzhi](https://developer.mozilla.org/zh-CN/profiles/hexianzhi), [nianxiaoge](https://developer.mozilla.org/zh-CN/profiles/nianxiaoge), [ithinktherforeiam](https://developer.mozilla.org/zh-CN/profiles/ithinktherforeiam), [cruiserdou](https://developer.mozilla.org/zh-CN/profiles/cruiserdou), [GHLgh](https://developer.mozilla.org/zh-CN/profiles/GHLgh), [eforegist](https://developer.mozilla.org/zh-CN/profiles/eforegist)\n\n **最后编辑者:** [canon](https://developer.mozilla.org/zh-CN/profiles/canon), Nov 21, 2017, 12:57:15 AM\n\n1.  [学习 Web 开发 ](https://developer.mozilla.org/zh-CN/docs/learn)\n2.  [JavaScript](https://developer.mozilla.org/zh-CN/docs/learn/JavaScript)\n3.  [JavaScript 第一步 ](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps)\n4.  什么是JavaScript？"]],[14811,15821],[14811,14811]]],[1528127376099,["Administrator@Tielemao",[[-1,14173,"[Edit](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript$edit#%E6%80%BB%E7%BB%93)"]],[14173,14293],[14173,14173]]],[1528127388527,["Administrator@Tielemao",[[-1,14502,"[ Overview: First steps](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps)[下一页 ](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/A_first_splash)\n"]],[14501,14689],[14501,14501]]],[1528127412251,["Administrator@Tielemao",[[-1,13026,"[Edit](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript$edit#%E6%B3%A8%E9%87%8A)"]],[13026,13146],[13026,13026]]],[1528127423506,["Administrator@Tielemao",[[-1,8487,"[Edit](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript$edit#%E6%80%8E%E6%A0%B7%E5%90%91%E4%BD%A0%E7%9A%84%E9%A1%B5%E9%9D%A2%E6%B7%BB%E5%8A%A0_JavaScript%EF%BC%9F)"]],[8487,8650],[8487,8487]]],[1528127436242,["Administrator@Tielemao",[[-1,140,"\n"]],[140,140],[139,139]]],[1528127445189,["Administrator@Tielemao",[[-1,297,"（ ["]],[299,299],[297,297]]],[1528127448466,["Administrator@Tielemao",[[1,297,"`"]],[297,297],[298,298]]],[1528127449960,["Administrator@Tielemao",[[-1,297,"`"]],[298,298],[297,297]]],[1528127451646,["Administrator@Tielemao",[[1,297,"`"]],[297,297],[298,298]]],[1528127454276,["Administrator@Tielemao",[[1,302,"`"]],[302,302],[303,303]]],[1528127468524,["Administrator@Tielemao",[[-1,291,"，其中的两个`HTML` ](https://developer.mozilla.org/en-US/docs/Learn/HTML)和 [CSS ](https://developer.mozilla.org/en-US/docs/Learn/CSS)）我们在 学习中心（[Learning Area](https://developer.mozilla.org/en-US/docs/Learn)）的其他部分有更多的细节。 \n"]],[292,506],[291,291]]],[1528127469582,["Administrator@Tielemao",[[1,291,":"]],[291,291],[292,292]]],[1528127470093,["Administrator@Tielemao",[[1,293,"\n"]],[292,292],[293,293]]],[1528127527278,["Administrator@Tielemao",[[-1,2376,"[Edit](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript$edit#%E6%89%80%E4%BB%A5%E5%AE%83%E5%AE%9E%E9%99%85%E4%B8%8A%E5%8F%AF%E4%BB%A5%E5%81%9A%E4%BB%80%E4%B9%88%EF%BC%9F)"]],[2376,2586],[2376,2376]]],[1528127557704,["Administrator@Tielemao",[[-1,2638,"](https://developer.mozilla.org/zh-CN/docs/Web/Reference/Events/click \"/zh-CN/docs/Web/Reference/Events/click\")"]],[2638,2749],[2638,2638]]],[1528127560051,["Administrator@Tielemao",[[-1,2632,"["]],[2633,2633],[2632,2632]]],[1528127574161,["Administrator@Tielemao",[[1,2798," "]],[2798,2798],[2799,2799]]],[1528127585606,["Administrator@Tielemao",[[1,2786," "]],[2786,2786],[2787,2787]]],[1528127592944,["Administrator@Tielemao",[[1,2795," "]],[2795,2795],[2796,2796]]],[1528127601111,["Administrator@Tielemao",[[-1,2788,"**"]],[2790,2790],[2788,2788]]],[1528127611163,["Administrator@Tielemao",[[-1,2783,"**"]],[2785,2785],[2783,2783]]],[1528127631619,["Administrator@Tielemao",[[1,2747,"**"]],[2747,2747],[2749,2749]]],[1528127635577,["Administrator@Tielemao",[[-1,2796,"**"]],[2798,2798],[2796,2796]]],[1528127674012,["Administrator@Tielemao",[[1,3362,"\n"]],[3361,3361],[3362,3362]]],[1528127683397,["Administrator@Tielemao",[[1,3540,"\n"]],[3539,3539],[3540,3540]]],[1528127686443,["Administrator@Tielemao",[[1,3849,"\n"]],[3848,3848],[3849,3849]]],[1528127725756,["Administrator@Tielemao",[[1,4736,"\n"]],[4735,4735],[4736,4736]]],[1528127730705,["Administrator@Tielemao",[[-1,5071,"[Edit](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript$edit#JavaScript_%E5%9C%A8%E4%BD%A0%E7%9A%84%E9%A1%B5%E9%9D%A2%E4%B8%8A%E5%81%9A%E4%BB%80%E4%B9%88%EF%BC%9F)"]],[5071,5274],[5071,5071]]],[1528127770994,["Administrator@Tielemao",[[1,6910," "]],[6910,6910],[6911,6911]]],[1528127773171,["Administrator@Tielemao",[[1,6935," "]],[6935,6935],[6936,6936]]],[1528127805329,["Administrator@Tielemao",[[-1,6660,"****"]],[6664,6664],[6660,6660]]],[1528127821193,["Administrator@Tielemao",[[-1,7079,"****"]],[7083,7083],[7079,7079]]],[1528127922615,["Administrator@Tielemao",[[1,6883," "]],[6883,6883],[6884,6884]]],[1528127928079,["Administrator@Tielemao",[[1,6933,"  "]],[6933,6933],[6935,6935]]],[1528127935974,["Administrator@Tielemao",[[-1,6904," "]],[6905,6905],[6904,6904]]],[1528127938551,["Administrator@Tielemao",[[-1,6928," "]],[6929,6929],[6928,6928]]],[1528127976927,["Administrator@Tielemao",[[-1,7397,"****"]],[7401,7401],[7397,7397]]],[1528127981557,["Administrator@Tielemao",[[-1,7686,"****"]],[7690,7690],[7686,7686]]],[1528127987897,["Administrator@Tielemao",[[-1,7789,"["]],[7790,7790],[7789,7789]]],[1528127993201,["Administrator@Tielemao",[[-1,7797,"](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/link \"HTML 中<link>元素指定了外部资源与当前文档的关系。 这个元素的用途包括为导航定义一个关系框架。这个元素经常用来链接样式表（如CSS文件）。\")"]],[7797,7939],[7797,7797]]],[1528127997921,["Administrator@Tielemao",[[-1,7825,"["]],[7826,7826],[7825,7825]]],[1528128003623,["Administrator@Tielemao",[[-1,7834,"](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/style \"HTML的<style>元素包含了文档的样式化信息或者文档的一部分，该标签的样式信息通常是CSS的格式。\") "]],[7834,7956],[7834,7834]]],[1528128007851,["Administrator@Tielemao",[[-1,7884,"["]],[7885,7885],[7884,7884]]],[1528128011763,["Administrator@Tielemao",[[-1,7894,"](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script \"HTML <script> 元素用于嵌入或引用可执行脚本。\")"]],[7894,7993],[7894,7894]]],[1528128033824,["Administrator@Tielemao",[[1,8108,"\n"]],[8107,8107],[8108,8108]]],[1528128034813,["Administrator@Tielemao",[[1,8167,"\n"]],[8166,8166],[8167,8167]]],[1528128045281,["Administrator@Tielemao",[[-1,9005,"["]],[9006,9006],[9005,9005]]],[1528128048964,["Administrator@Tielemao",[[-1,9015,"](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script \"HTML <script> 元素用于嵌入或引用可执行脚本。\") "]],[9015,9115],[9015,9015]]],[1528128054584,["Administrator@Tielemao",[[-1,8989,"再 "]],[8991,8991],[8989,8989]]],[1528128055596,["Administrator@Tielemao",[[1,8989,"d"]],[8989,8989],[8990,8990]]],[1528128056939,["Administrator@Tielemao",[[-1,8989,"d"]],[8990,8990],[8989,8989]]],[1528128058923,["Administrator@Tielemao",[[1,8989,"在‘"]],[8989,8989],[8991,8991]]],[1528128060652,["Administrator@Tielemao",[[-1,8990,"‘"]],[8991,8991],[8990,8990]]],[1528128062820,["Administrator@Tielemao",[[1,8990,"`"]],[8990,8990],[8991,8991]]],[1528128063713,["Administrator@Tielemao",[[1,8999,"`"]],[8999,8999],[9000,9000]]],[1528128072451,["Administrator@Tielemao",[[1,9044,"\n"]],[9044,9044],[9045,9045]]],[1528128073165,["Administrator@Tielemao",[[1,9045,"\n"]],[9045,9045],[9046,9046]]],[1528128076035,["Administrator@Tielemao",[[-1,9101,"。"]],[9102,9102],[9101,9101]]],[1528128077705,["Administrator@Tielemao",[[1,9101,"."]],[9101,9101],[9102,9102]]],[1528128083888,["Administrator@Tielemao",[[-1,9119,"再"]],[9120,9120],[9119,9119]]],[1528128084712,["Administrator@Tielemao",[[1,9119,"d"]],[9119,9119],[9120,9120]]],[1528128085585,["Administrator@Tielemao",[[-1,9119,"d"]],[9120,9120],[9119,9119]]],[1528128086229,["Administrator@Tielemao",[[1,9119,"在"]],[9119,9119],[9120,9120]]],[1528128092568,["Administrator@Tielemao",[[-1,9611,"["]],[9612,9612],[9611,9611]]],[1528128095729,["Administrator@Tielemao",[[-1,9621,"](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script \"HTML <script> 元素用于嵌入或引用可执行脚本。\") "]],[9621,9721],[9621,9621]]],[1528128098933,["Administrator@Tielemao",[[1,9661,"\n"]],[9660,9660],[9661,9661]]],[1528128100060,["Administrator@Tielemao",[[1,9595,"\n"]],[9594,9594],[9595,9595]]],[1528128101773,["Administrator@Tielemao",[[-1,9674,"["]],[9675,9675],[9674,9674]]],[1528128105128,["Administrator@Tielemao",[[-1,9684,"](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script \"HTML <script> 元素用于嵌入或引用可执行脚本。\") "]],[9684,9784],[9684,9684]]],[1528128123673,["Administrator@Tielemao",[[1,10882," "]],[10882,10882],[10883,10883]]]]],["54b69051-e5e1-45ee-ab36-61cb6bb474ee",1528158535575,"[[toc]]\n\n# 什么是JavaScript？\n\n\n欢迎来到 MDN JavaScript 初学者的课程！ 在第一篇文章中，我们将会站在一定的高度来俯看 JavaScript，回答一些像“它是什么？”和“它能做什么？”的问题 。并确保你熟悉 JavaScript 的用途。\n\n## 一个高水平的定义\n\nJavaScript 是允许你在网页中实现复杂事情的一门编程语言 —— 每次当你浏览网页时不只是显示静态信息—— 显示即时更新的内容， 或者交互式的地图，或 2D/3D 图形动画，又或者自动播放视频等，你可以确信，JavaScript 参与其中。这是 Web技术的三层蛋糕标准:\n\n![](https://mdn.mozillademos.org/files/13502/cake.png)\n\n*   [HTML](https://developer.mozilla.org/en-US/docs/Glossary/HTML \"HTML: HTML (HyperText Markup Language) is a descriptive language that specifies webpage structure.\")是一种标记语言，用来结构化我们的网页内容和赋予内容含义，例如定义段落、标题、和数据表,或在页面中嵌入图片和视频。\n*   [CSS](https://developer.mozilla.org/en-US/docs/Glossary/CSS \"CSS: CSS (Cascading Style Sheets) is a declarative language that controls how webpages look in the browser.\") 是一种样式规则语言，我们将样式应用于我们的 HTML 内容， 例如设置背景颜色和字体，在多个列种布局我们的内容。\n*   [JavaScript](https://developer.mozilla.org/en-US/docs/Glossary/JavaScript \"JavaScript: JavaScript (JS) is a programming language mostly used to dynamically script webpages on the client side, but it is also often utilized on the server-side, using packages such as Node.js.\") 是一种编程语言，允许你创建动态更新的内容，控制多媒体，图像动画，和一些其他的东西。好吧，虽然不是一切，但是它的神奇之处是你能够用几行JavaScript代码就能实现。\n\n这三个层次规矩地建立在彼此之上。让我们用一个简单的文本标签作为例子。我们可以用 HTML 来标记它，以赋予它结构和目的：\n\n```html\n<p>Player 1: Chris</p>\n```\n\n![](https://mdn.mozillademos.org/files/13422/just-html.png)\n\n然后我们可以加上一点 CSS 来使它看起来更好：\n\n```css\np {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n```\n\n![](https://mdn.mozillademos.org/files/13424/html-and-css.png)\n\n而最后，我们可以加上一些 JavaScript 来实现动态行为：\n\n```js\nvar para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n```\n\n尝试点击文本标签，观察会发生什么（同时注意，你可以在 GitHub 上找到这个演示—— [源代码](https://github.com/mdn/learning-area/blob/master/javascript/introduction-to-js-1/what-is-js/javascript-label.html)，或者 [实时运行](http://mdn.github.io/learning-area/javascript/introduction-to-js-1/what-is-js/javascript-label.html)）！\n\nJavaScript 可以做比这更多的东西——让我们详细探索它可以做些什么。\n\n## 所以它_实际上_可以做什么？\n\nJavaScript 语言的核心包含一些普遍的编程特点，以让你可以做到如下的事情：\n\n*   在变量中储存有用的值。以上面的演示做例子，我们请求输入一个新的名字，然后把那个名字储存到一个叫 `name` 的变量.\n*   对一段文本（在编程中被称为“字符串”）进行操作。在上面的例子中，我们取出字符串 \"Player 1: \"，然后把它和 name 变量连结起来，创造出完整的文本标签，例：''Player 1: Chris\"。\n*   运行代码以响应在网页中发生的特定事件。在上述的例子中，我们用了一个 `click` 事件来检测按钮什么时候被点击，然后运行更新文本标签的代码。\n*   以及更多！\n\n然而更令人兴奋的是建立在 JavaScript 语言的核心之上的功能。在你的 JavaScript 代码里，被称为**应用程序编程接口** [Application Programming Interfaces  (APIs) ]  的功能会提供额外的超能力给你使用。\n\nAPIs 是已经建立好的一套代码组件，目的是让开发者可以实现除此之外很难甚至不可能实现的程序。它们的作用就像是已经制作好的家具套件对家居建设的作用一样——从一堆已经切好的木板开始组装一个书柜，显然比自己设计，寻找合适的木材，裁切至合适的大小和形状，找到合适大小的螺丝钉，然后组装成一个书柜要简单得多。\n\n它们 (APIs) 通常分成两个分类。\n\n![](https://mdn.mozillademos.org/files/13508/browser.png)\n\n**浏览器 APIs (Browser APIs)** 已经安装在你的网页浏览器中，而且能够从周围的计算机环境中揭露数据，或者做有用的复杂事情。举个例子：\n\n*   文档对象模型 API [[DOM (Document Object Model) API](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model)] 允许你操作 HTML 和 CSS，创建，移除和修改 HTML，动态地应用新的样式到你的页面，等等。比如说每次你在一个页面里看到一个弹出窗口，或者显示一些新的内容（像我们在上面的简单演示中看到那样），这就是 DOM 在运作。\n\n*   地理定位 API [[Geolocation API](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation)] 获取地理信息。这就是为什么谷歌地图 [[Google Maps](https://www.google.com/maps)] 可以找到你的位置，而且标示在地图上。\n\n*   画布 [[Canvas](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API)] 和 [WebGL](https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API) APIs 允许你创建生动的 2D 和 3D 图像。人们正运用这些网页技术进行一些令人惊叹的事情——比如说 [Chrome Experiments](https://www.chromeexperiments.com/webgl) 和 [webglsamples](http://webglsamples.org/)。\n\n*   音像和影像 APIs [[Audio and Video APIs](https://developer.mozilla.org/en-US/Apps/Fundamentals/Audio_and_video_delivery)]，像 [`HTMLMediaElement`](https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement \"从父级元素 HTML 元素继承属性\") 和 [WebRTC](https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API) 允许你运用多媒体去做一些非常有趣的事情，比如在网页中播放音像和影像，或者从你的网页摄像头中获取获取录像，然后在其他人的电脑上展示（尝试我们的简单快照演示 [[Snapshot demo](http://chrisdavidmills.github.io/snapshot/)] 以理解这个概念）。\n\n**Note**: 上述的很多演示都不能在旧的浏览器中运行——当进行实验时，在现代浏览器，像 Firefox, Chrome, Edge 或者 Opera，中运行会是一个好的想法。当你接近交付产品代码时，你会需要更深入地去考虑跨平台测试 [[cross browser testing](https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing)]（例：现实客户会使用的实际代码）。\n\n**第三方 APIs (Third party APIs)** 默认是没有安装到浏览器中的，而你通常需要从网络上的某些地方取得它们的代码和信息。举个例子：\n\n*   推特 API [[Twitter API](https://dev.twitter.com/overview/documentation)] 允许你做一些像是在你的网站上展示你的最新推送之类的事情。\n\n*   谷歌地图 API [[Google Maps API](https://developers.google.com/maps/)] 允许你去嵌入定制的地图到你的网站，和其他的功能。\n\n**Note**: 这些 APIs 是高级的，而我们不会在课程中涉及任何的这些 APIs，但是如果你想了解更多，上述的链接提供延展的文档供参考。\n\n这里还有更多可用的东西！然而，不要这么快就感到太过兴奋。你不可能只通过 24 小时的 JavaScript 学习，就能够构建下一个 Facebook, Google Maps 或者 Instagram——这里有很多的基础需要优先覆盖。而这就是为什么你在这里——让我们继续前进！\n\n## JavaScript 在你的页面上做什么？\n\n在这我们会开始确实地查看一些代码，而在这样做的同时，探索当你在你的页面上运行 JavaScript 的时候实际发生了什么。\n\n让我们简单地回顾当你在浏览器中读取一个网页时发生什么（在文章 [How CSS works](https://developer.mozilla.org/en-US/Learn/CSS/Introduction_to_CSS/How_CSS_works#How_does_CSS_actually_work) 中第一次谈及到）。 当你在浏览器中读取一个网页，你在一个实行环境（浏览器标签）中运行你的代码（HTML, CSS 和 JavaScript）。这就像是一个工厂，获取原材料（代码）然后出产一个产品（网页）。\n\n![](https://mdn.mozillademos.org/files/13504/execution.png)\n\n在 HTML 和 CSS 已经被集合和组装成一个网页后，浏览器的 JavaScript 引擎执行 JavaScript。这保证了当 JavaScript 开始运行时，网页的结构和样式已经在该出现的地方了。\n\n这是一个好事情，正如 JavaScript 的普遍用处是通过 DOM API（如之前提及的那样）动态地修改 HTML 和 CSS 来更新用户交界面。如果 JavaScript 在 HTML 和 CSS 加载完成之前加载运行，那么会发生错误。\n\n### 浏览器安全\n\n每个浏览器标签本身就是一个用来运行代码的分离的容器（这些容器用专业术语称为“运行环境”）——这意味着在大多数情况中，每个标签中的代码是完全分离地运行，而且在一个标签中的代码不能直接影响在另一个标签中的代码——或者在另一个网站中的。这是一个好的安全措施——如果不是这样的话，那么海盗们就可以开始写从其他网站偷取信息的代码，和其他像这样的坏事。\n\n**Note**: 这里有安全的方式去在不同网站/标签中传送代码和数据，但这些方法是高级的技术，而我们不会在这门课里覆盖这些。\n\n### JavaScript 运行顺序\n\n当浏览器遇到一块 JavaScript 代码时，它通常会按顺序运行这代码块，从上往下。这意味着你需要注意你放置代码的顺序。举个例子，让我们回到我们在第一个例子中看到的 JavaScript 代码块：\n\n```js\nvar para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n```\n\n在这里我们正选定一个文本段落 (line 1)，然后给它附上一个事件监听器 (line 3) 使得当这个段落被点击时，`updateName()` 代码块 (lines 5–8) 会被运行。`updateName()` 代码块（这类可以重复使用的代码块被称为“函数”）向用户请求一个新的名字，然后把这个名字插入到段落中以更新显示。\n\n如果你互换了代码里最初两行的顺序，它将不会工作——取而代之的是，你会在浏览器的开发者控制台中得到一个错误——TypeError: para is undefined [类型错误：para没有被定义]。这意味着 para 对象还不存在，所以我们不能为它增添一个事件监听器。\n\n**Note**: 这是一个很常见的错误——你需要注意在尝试对你的代码中引用的对象进行操作前，它已经存在。\n\n### 解释代码 vs 编译代码\n\n在编程环境中，你或许听说过这两个术语 **解释 [interpreted]** 和 **编译 [compiled]**。JavaScript 是一个解释语言——代码从上到下运行，而运行的结果会马上被返回。在浏览器运行代码前，你不必先把它转化为其他形式。\n\n另一方面来说，编译语言则需要在运行前转化为另一种形式。比如说 C/C++ 则要先被编译成汇编语言，然后再由电脑运行。\n\n两种方式都有不同的优势，然而就目前而言，我们不会谈论这些。\n\n### 服务器端代码 vs 客户端代码\n\n你或许也听说过  **服务器端 [server-side]** 和 **客户端 [client-side]**   代码这两个术语，尤其是在网页开发的语境中。客户端代码是在用户的电脑上运行的代码——当浏览一个网页时，这个网页的客户端代码就会被下载，然后由浏览器来运行和展示。在这个 JavaScript 模块，我们将会明确地探讨 **客户端 JavaScript [client-side JavaScript]**。\n\n在另一方面，服务器端代码则在服务器上运行，然后它的结果会由浏览器进行下载和展示。流行的服务器端网页语言包含以下几个例子：PHP, Python, Ruby, ASP.NET 和 JavaScript！JavaScript 同时也能用作服务器端语言，比如说在流行的 Node.js 环境中——你可以在我们的 [动态网页 - 服务器端编程 [Dynamic Websites – Server-side programming]](https://developer.mozilla.org/en-US/docs/Learn/Server-side) 主题中找到更多关于服务器端 JavaScript 的知识。\n\n**动态 [dynamic]** 这个词被用来描述客户端 JavaScript 和服务器端语言——它指的是能更新网页/应用的内容以在不同环境下显示不同事物，当有需要时产生新内容的能力。服务器端代码会动态地在服务器上产生新的内容，比如说从数据库中提取信息。反之，客户端 JavaScript则在用户的浏览器中动态地生成新的内容，比如说创建一个新的 HTML 表格，从中插入从服务器请求到的数据，然后在已经向用户展示了的网页中显示这个表格。在这两个语境中，动态的意义有细微的不同，但是有联系，而且两种方法（服务器端和客户端）通常是在一起工作的。\n\n一个没有动态更新内容的网页被指作 **静态 [static]** ——它只会一直显示一样的内容。\n\n## 怎样向你的页面添加 JavaScript？\n\nJavaScript 以一种近似于 CSS 的方式应用到你的 HTML 页面中。尽管 CSS 使用 `<link>` 元素去应用外部的样式表 [stylesheet] 和 `<style>`元素去应用内部的样式表到 HTML，JavaScript 只需要在 HTML 世界里的一个元素—— `<script>` 元素。让我们学习一下它怎么工作。\n\n### 内部的 JavaScript\n\n1.  首先，复制我们的范例文件 [apply-javascript.html](https://github.com/mdn/learning-area/blob/master/javascript/introduction-to-js-1/what-is-js/apply-javascript.html) 到本地。储存到一个可以察觉的目录中。\n\n2.  在你的浏览器和文本编辑器中打开这个文件。你会看到这个 HTML 创建了一个包含了一个可点击按钮的简单网页。\n\n3.  `然后，在你的文本编辑器里，在你的结束 </body>` 标签前接上以下代码：\n\n    ```html\n    <script>\n\n      // JavaScript goes here\n\n    </script>\n    ```\n\n4.  现在我们会在我们的 [`<script>`](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script \"HTML <script> 元素用于嵌入或引用可执行脚本。\") 元素中加上一些 JavaScript 来让这个页面做一些更有趣的东西——在 \"// JavaScript goes here\" 这一行下面加上以下代码：\n\n    ```js\n    function createParagraph() {\n      var para = document.createElement('p');\n      para.textContent = 'You clicked the button!';\n      document.body.appendChild(para);\n    }\n\n    var buttons = document.querySelectorAll('button');\n\n    for(var i = 0; i < buttons.length ; i++) {\n      buttons[i].addEventListener('click', createParagraph);\n    }\n    ```\n\n5.  保存你的文件并刷新你的浏览器——现在当你点击按钮时，你应当会看到一个新的段落产生并在下方显示。\n\n**Note**: 如果你的例子看上去不能工作，再检查所有的步骤和保证你都做对了。你有把原始代码作为 `.html` 文件保存为本地复件吗？你有刚好在`</body> `标签前加上 `<script>`元素吗？你有确切地输入所示的 JavaScript ？ \n\n**JavaScript 是区分大小写的，而且非常的讲究，所以你需要精确地输入所示的句法，不然它可能会无法工作.**\n\n**Note**: 你可以在 GitHub 上看到这个版本 [apply-javascript-internal.html](https://github.com/mdn/learning-area/blob/master/javascript/introduction-to-js-1/what-is-js/apply-javascript-internal.html) ([see it live too](http://mdn.github.io/learning-area/javascript/introduction-to-js-1/what-is-js/apply-javascript-internal.html)).\n\n### 外部的 JavaScript\n\n这方法很不错，但要是我们想要把我们的 JavaScript 放置在一个外部文件中呢？现在让我们探索这个。\n\n1.  首先，在跟你的简单 HTML 文件的同一目录下创建一个新的文件。命名为 `script.js` ——保证它以 .js 为文件扩展名，因为这是它被认作是 JavaScript 的方式。\n\n2.  然后，把所有在你现在的 `<script>`元素中的脚本 [script] 提取出来并粘贴到 .js 文件。保存这个文件。\n\n3.  现在替换你的 `<script>`元素为如下：\n\n    ```html\n    <script src=\"script.js\"></script>\n    ```\n\n4.  保存然后刷新你的浏览器，然后你应该看到同样的东西！它工作起来是一样的，但是现在我们把 JavaScript 写进了一个外部文件。对于规划你的代码来说，这通常是一件好事，而且让它可以在多个 HTML 文件中重复使用。再加上 HTML 中没有一大堆脚本的话，HTML 会更容易阅读。\n\n**Note**: 你可以在 GitHub 上看到这个版本 as [apply-javascript-external.html](https://github.com/mdn/learning-area/blob/master/javascript/introduction-to-js-1/what-is-js/apply-javascript-external.html) and [script.js](https://github.com/mdn/learning-area/blob/master/javascript/introduction-to-js-1/what-is-js/script.js) ([see it live too](http://mdn.github.io/learning-area/javascript/introduction-to-js-1/what-is-js/apply-javascript-external.html)).\n\n### 内联 JavaScript 处理器\n\n注意，有时候你会遇到在 HTML 中存在着一丝真实的 JavaScript 代码。它或许看上去会像这样：\n\n```js\nfunction createParagraph() {\n  var para = document.createElement('p');\n  para.textContent = 'You clicked the button!';\n  document.body.appendChild(para);\n}\n```\n\n```html\n<button onclick=\"createParagraph()\">Click me!</button>\n```\n\n你可以在下面尝试这个版本的演示。\n\n这个演示有着跟前两节的演示一模一样的功能，除了 [`<button>`](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/button \"HTML <button> 元素表示一个可点击的按钮，可以用在表单或文档其它需要使用简单标准按钮的地方。\") 元素中包含了一个内联的 `onclick` 处理器以至于函数会在按钮被按下时运行。\n\n**然而请不要这样做。**  这是一个用 JavaScript 来污染你的 HTML 的坏实践，而且它还不高效——你会需要在每个想要 JavaScript 应用到的按钮上包含 `onclick=\"createParagraph()\"` 属性。\n\n使用一个纯 JavaScript 结构允许你使用一个指令来选取所有的按钮。我们在上面实现这一目的的代码看上去是这样的：\n\n```html\nvar buttons = document.querySelectorAll('button');\n\nfor(var i = 0; i < buttons.length ; i++) {\n  buttons[i].addEventListener('click', createParagraph);\n}\n```\n\n这或许看上去比 `onclick` 属性要长一些，但是这会应用于所有的按钮，无论页面上有多少个，和有多少个按钮被添加或者移除。不需要对 JavaScript 进行任何修改。\n\n**Note**: 尝试编辑你自己的 `apply-javascript.html` 版本并在文件中加上更多的按钮。当你重新加载时，你应该会发现所有的按钮被按下时都会创建一个段落。很简洁，不是吗？\n\n## 注释\n\n正如使用 HTML 和 CSS 一样，在你的 JavaScript 代码中书写会被浏览器忽略掉的注释是可行的，并且注释只用来为你的开发者同事提供关于代码如何工作的指引（包括你，如果你在 6 个月后回到你的代码并忘记了你做过些什么）。注释非常有用，而且你应该经常使用它们，尤其是在更大的应用程序中。这里有两类注释：\n\n*   一个单行注释书写在一个双正斜杠后 (//)，比如：\n\n    ```js\n    // I am a comment\n    ```\n\n*   一个多行注释书写在字符串 /* 和 */ 之间， 比如：\n\n    ```js\n    /*\n      I am also\n      a comment\n    */\n    ```\n\n所以举例说，我们可以用 “注释” 来为我们上一个演示的 JavaScript 注释：\n\n```js\n// Function: creates a new paragraph and append it to the bottom of the HTML body.\n\nfunction createParagraph() {\n  var para = document.createElement('p');\n  para.textContent = 'You clicked the button!';\n  document.body.appendChild(para);\n}\n\n/*\n  1\\. Get references to all the buttons on the page and soter them in an array.\n  2\\. Loop through all the buttons and add a click event listener to each one.\n\n  When any button is pressed, the createParagraph() function will be run.\n*/\n\nvar buttons = document.querySelectorAll('button');\n\nfor(var i = 0; i < buttons.length ; i++) {\n  buttons[i].addEventListener('click', createParagraph);\n}\n```\n\n## 总结\n\n所以你到这里了，你在 JavaScript 世界中的第一步。我们仅仅从理论开始，让你熟悉为什么你会使用 JavaScript，和你可以用它做什么事情。在这过程中你看到了一些代码示例并且学习到了 JavaScript 是如何与你网站中的其他代码适配的。\n\nJavaScript 现在或许看上去有一点令人畏惧，但不用担心——在这门课中我们会逐步地引领你。在下一篇文章我们会[全心投入到实践](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Introduction_to_JavaScript_1/A_first_splash)，让你专注其中并建立你自己的 JavaScript 例子。\n\n\n\n\n",[[1528158515202,["Administrator@Tielemao",[[1,2319,"\n"]],[2318,2318],[2319,2319]]],[1528158516823,["Administrator@Tielemao",[[1,2320,"\n"]],[2318,2318],[2319,2319]]],[1528158912635,["Administrator@Tielemao",[[1,2320,"![js-player]($res/js-player.gif)\n\n"]],[2319,2319],[2353,2353]]],[1528158915071,["Administrator@Tielemao",[[-1,2319,"\n"]],[2319,2319],[2318,2318]]],[1528158918217,["Administrator@Tielemao",[[-1,2353,"\n"]],[2353,2353],[2352,2352]]]]],["59f71ca7-4290-465e-966a-a0dcd46fa2cd",1528182187819,"[[toc]]\n\n# 什么是JavaScript？\n\n\n欢迎来到 MDN JavaScript 初学者的课程！ 在第一篇文章中，我们将会站在一定的高度来俯看 JavaScript，回答一些像“它是什么？”和“它能做什么？”的问题 。并确保你熟悉 JavaScript 的用途。\n\n## 一个高水平的定义\n\nJavaScript 是允许你在网页中实现复杂事情的一门编程语言 —— 每次当你浏览网页时不只是显示静态信息—— 显示即时更新的内容， 或者交互式的地图，或 2D/3D 图形动画，又或者自动播放视频等，你可以确信，JavaScript 参与其中。这是 Web技术的三层蛋糕标准:\n\n![](https://mdn.mozillademos.org/files/13502/cake.png)\n\n*   [HTML](https://developer.mozilla.org/en-US/docs/Glossary/HTML \"HTML: HTML (HyperText Markup Language) is a descriptive language that specifies webpage structure.\")是一种标记语言，用来结构化我们的网页内容和赋予内容含义，例如定义段落、标题、和数据表,或在页面中嵌入图片和视频。\n*   [CSS](https://developer.mozilla.org/en-US/docs/Glossary/CSS \"CSS: CSS (Cascading Style Sheets) is a declarative language that controls how webpages look in the browser.\") 是一种样式规则语言，我们将样式应用于我们的 HTML 内容， 例如设置背景颜色和字体，在多个列种布局我们的内容。\n*   [JavaScript](https://developer.mozilla.org/en-US/docs/Glossary/JavaScript \"JavaScript: JavaScript (JS) is a programming language mostly used to dynamically script webpages on the client side, but it is also often utilized on the server-side, using packages such as Node.js.\") 是一种编程语言，允许你创建动态更新的内容，控制多媒体，图像动画，和一些其他的东西。好吧，虽然不是一切，但是它的神奇之处是你能够用几行JavaScript代码就能实现。\n\n这三个层次规矩地建立在彼此之上。让我们用一个简单的文本标签作为例子。我们可以用 HTML 来标记它，以赋予它结构和目的：\n\n```html\n<p>Player 1: Chris</p>\n```\n\n![](https://mdn.mozillademos.org/files/13422/just-html.png)\n\n然后我们可以加上一点 CSS 来使它看起来更好：\n\n```css\np {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n```\n\n![](https://mdn.mozillademos.org/files/13424/html-and-css.png)\n\n而最后，我们可以加上一些 JavaScript 来实现动态行为：\n\n```js\nvar para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n```\n\n尝试点击文本标签，观察会发生什么（同时注意，你可以在 GitHub 上找到这个演示—— [源代码](https://github.com/mdn/learning-area/blob/master/javascript/introduction-to-js-1/what-is-js/javascript-label.html)，或者 [实时运行](http://mdn.github.io/learning-area/javascript/introduction-to-js-1/what-is-js/javascript-label.html)）！\n\n![js-player]($res/js-player.gif)\n\nJavaScript 可以做比这更多的东西——让我们详细探索它可以做些什么。\n\n## 所以它_实际上_可以做什么？\n\nJavaScript 语言的核心包含一些普遍的编程特点，以让你可以做到如下的事情：\n\n*   在变量中储存有用的值。以上面的演示做例子，我们请求输入一个新的名字，然后把那个名字储存到一个叫 `name` 的变量.\n*   对一段文本（在编程中被称为“字符串”）进行操作。在上面的例子中，我们取出字符串 \"Player 1: \"，然后把它和 name 变量连结起来，创造出完整的文本标签，例：''Player 1: Chris\"。\n*   运行代码以响应在网页中发生的特定事件。在上述的例子中，我们用了一个 `click` 事件来检测按钮什么时候被点击，然后运行更新文本标签的代码。\n*   以及更多！\n\n然而更令人兴奋的是建立在 JavaScript 语言的核心之上的功能。在你的 JavaScript 代码里，被称为**应用程序编程接口** [Application Programming Interfaces  (APIs) ]  的功能会提供额外的超能力给你使用。\n\nAPIs 是已经建立好的一套代码组件，目的是让开发者可以实现除此之外很难甚至不可能实现的程序。它们的作用就像是已经制作好的家具套件对家居建设的作用一样——从一堆已经切好的木板开始组装一个书柜，显然比自己设计，寻找合适的木材，裁切至合适的大小和形状，找到合适大小的螺丝钉，然后组装成一个书柜要简单得多。\n\n它们 (APIs) 通常分成两个分类。\n\n![](https://mdn.mozillademos.org/files/13508/browser.png)\n\n**浏览器 APIs (Browser APIs)** 已经安装在你的网页浏览器中，而且能够从周围的计算机环境中揭露数据，或者做有用的复杂事情。举个例子：\n\n*   文档对象模型 API [[DOM (Document Object Model) API](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model)] 允许你操作 HTML 和 CSS，创建，移除和修改 HTML，动态地应用新的样式到你的页面，等等。比如说每次你在一个页面里看到一个弹出窗口，或者显示一些新的内容（像我们在上面的简单演示中看到那样），这就是 DOM 在运作。\n\n*   地理定位 API [[Geolocation API](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation)] 获取地理信息。这就是为什么谷歌地图 [[Google Maps](https://www.google.com/maps)] 可以找到你的位置，而且标示在地图上。\n\n*   画布 [[Canvas](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API)] 和 [WebGL](https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API) APIs 允许你创建生动的 2D 和 3D 图像。人们正运用这些网页技术进行一些令人惊叹的事情——比如说 [Chrome Experiments](https://www.chromeexperiments.com/webgl) 和 [webglsamples](http://webglsamples.org/)。\n\n*   音像和影像 APIs [[Audio and Video APIs](https://developer.mozilla.org/en-US/Apps/Fundamentals/Audio_and_video_delivery)]，像 [`HTMLMediaElement`](https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement \"从父级元素 HTML 元素继承属性\") 和 [WebRTC](https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API) 允许你运用多媒体去做一些非常有趣的事情，比如在网页中播放音像和影像，或者从你的网页摄像头中获取获取录像，然后在其他人的电脑上展示（尝试我们的简单快照演示 [[Snapshot demo](http://chrisdavidmills.github.io/snapshot/)] 以理解这个概念）。\n\n**Note**: 上述的很多演示都不能在旧的浏览器中运行——当进行实验时，在现代浏览器，像 Firefox, Chrome, Edge 或者 Opera，中运行会是一个好的想法。当你接近交付产品代码时，你会需要更深入地去考虑跨平台测试 [[cross browser testing](https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing)]（例：现实客户会使用的实际代码）。\n\n**第三方 APIs (Third party APIs)** 默认是没有安装到浏览器中的，而你通常需要从网络上的某些地方取得它们的代码和信息。举个例子：\n\n*   推特 API [[Twitter API](https://dev.twitter.com/overview/documentation)] 允许你做一些像是在你的网站上展示你的最新推送之类的事情。\n\n*   谷歌地图 API [[Google Maps API](https://developers.google.com/maps/)] 允许你去嵌入定制的地图到你的网站，和其他的功能。\n\n**Note**: 这些 APIs 是高级的，而我们不会在课程中涉及任何的这些 APIs，但是如果你想了解更多，上述的链接提供延展的文档供参考。\n\n这里还有更多可用的东西！然而，不要这么快就感到太过兴奋。你不可能只通过 24 小时的 JavaScript 学习，就能够构建下一个 Facebook, Google Maps 或者 Instagram——这里有很多的基础需要优先覆盖。而这就是为什么你在这里——让我们继续前进！\n\n## JavaScript 在你的页面上做什么？\n\n在这我们会开始确实地查看一些代码，而在这样做的同时，探索当你在你的页面上运行 JavaScript 的时候实际发生了什么。\n\n让我们简单地回顾当你在浏览器中读取一个网页时发生什么（在文章 [How CSS works](https://developer.mozilla.org/en-US/Learn/CSS/Introduction_to_CSS/How_CSS_works#How_does_CSS_actually_work) 中第一次谈及到）。 当你在浏览器中读取一个网页，你在一个实行环境（浏览器标签）中运行你的代码（HTML, CSS 和 JavaScript）。这就像是一个工厂，获取原材料（代码）然后出产一个产品（网页）。\n\n![](https://mdn.mozillademos.org/files/13504/execution.png)\n\n在 HTML 和 CSS 已经被集合和组装成一个网页后，浏览器的 JavaScript 引擎执行 JavaScript。这保证了当 JavaScript 开始运行时，网页的结构和样式已经在该出现的地方了。\n\n这是一个好事情，正如 JavaScript 的普遍用处是通过 DOM API（如之前提及的那样）动态地修改 HTML 和 CSS 来更新用户交界面。如果 JavaScript 在 HTML 和 CSS 加载完成之前加载运行，那么会发生错误。\n\n### 浏览器安全\n\n每个浏览器标签本身就是一个用来运行代码的分离的容器（这些容器用专业术语称为“运行环境”）——这意味着在大多数情况中，每个标签中的代码是完全分离地运行，而且在一个标签中的代码不能直接影响在另一个标签中的代码——或者在另一个网站中的。这是一个好的安全措施——如果不是这样的话，那么海盗们就可以开始写从其他网站偷取信息的代码，和其他像这样的坏事。\n\n**Note**: 这里有安全的方式去在不同网站/标签中传送代码和数据，但这些方法是高级的技术，而我们不会在这门课里覆盖这些。\n\n### JavaScript 运行顺序\n\n当浏览器遇到一块 JavaScript 代码时，它通常会按顺序运行这代码块，从上往下。这意味着你需要注意你放置代码的顺序。举个例子，让我们回到我们在第一个例子中看到的 JavaScript 代码块：\n\n```js\nvar para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n```\n\n在这里我们正选定一个文本段落 (line 1)，然后给它附上一个事件监听器 (line 3) 使得当这个段落被点击时，`updateName()` 代码块 (lines 5–8) 会被运行。`updateName()` 代码块（这类可以重复使用的代码块被称为“函数”）向用户请求一个新的名字，然后把这个名字插入到段落中以更新显示。\n\n如果你互换了代码里最初两行的顺序，它将不会工作——取而代之的是，你会在浏览器的开发者控制台中得到一个错误——TypeError: para is undefined [类型错误：para没有被定义]。这意味着 para 对象还不存在，所以我们不能为它增添一个事件监听器。\n\n**Note**: 这是一个很常见的错误——你需要注意在尝试对你的代码中引用的对象进行操作前，它已经存在。\n\n### 解释代码 vs 编译代码\n\n在编程环境中，你或许听说过这两个术语 **解释 [interpreted]** 和 **编译 [compiled]**。JavaScript 是一个解释语言——代码从上到下运行，而运行的结果会马上被返回。在浏览器运行代码前，你不必先把它转化为其他形式。\n\n另一方面来说，编译语言则需要在运行前转化为另一种形式。比如说 C/C++ 则要先被编译成汇编语言，然后再由电脑运行。\n\n两种方式都有不同的优势，然而就目前而言，我们不会谈论这些。\n\n### 服务器端代码 vs 客户端代码\n\n你或许也听说过  **服务器端 [server-side]** 和 **客户端 [client-side]**   代码这两个术语，尤其是在网页开发的语境中。客户端代码是在用户的电脑上运行的代码——当浏览一个网页时，这个网页的客户端代码就会被下载，然后由浏览器来运行和展示。在这个 JavaScript 模块，我们将会明确地探讨 **客户端 JavaScript [client-side JavaScript]**。\n\n在另一方面，服务器端代码则在服务器上运行，然后它的结果会由浏览器进行下载和展示。流行的服务器端网页语言包含以下几个例子：PHP, Python, Ruby, ASP.NET 和 JavaScript！JavaScript 同时也能用作服务器端语言，比如说在流行的 Node.js 环境中——你可以在我们的 [动态网页 - 服务器端编程 [Dynamic Websites – Server-side programming]](https://developer.mozilla.org/en-US/docs/Learn/Server-side) 主题中找到更多关于服务器端 JavaScript 的知识。\n\n**动态 [dynamic]** 这个词被用来描述客户端 JavaScript 和服务器端语言——它指的是能更新网页/应用的内容以在不同环境下显示不同事物，当有需要时产生新内容的能力。服务器端代码会动态地在服务器上产生新的内容，比如说从数据库中提取信息。反之，客户端 JavaScript则在用户的浏览器中动态地生成新的内容，比如说创建一个新的 HTML 表格，从中插入从服务器请求到的数据，然后在已经向用户展示了的网页中显示这个表格。在这两个语境中，动态的意义有细微的不同，但是有联系，而且两种方法（服务器端和客户端）通常是在一起工作的。\n\n一个没有动态更新内容的网页被指作 **静态 [static]** ——它只会一直显示一样的内容。\n\n## 怎样向你的页面添加 JavaScript？\n\nJavaScript 以一种近似于 CSS 的方式应用到你的 HTML 页面中。尽管 CSS 使用 `<link>` 元素去应用外部的样式表 [stylesheet] 和 `<style>`元素去应用内部的样式表到 HTML，JavaScript 只需要在 HTML 世界里的一个元素—— `<script>` 元素。让我们学习一下它怎么工作。\n\n### 内部的 JavaScript\n\n1.  首先，复制我们的范例文件 [apply-javascript.html](https://github.com/mdn/learning-area/blob/master/javascript/introduction-to-js-1/what-is-js/apply-javascript.html) 到本地。储存到一个可以察觉的目录中。\n\n2.  在你的浏览器和文本编辑器中打开这个文件。你会看到这个 HTML 创建了一个包含了一个可点击按钮的简单网页。\n\n3.  `然后，在你的文本编辑器里，在你的结束 </body>` 标签前接上以下代码：\n\n    ```html\n    <script>\n\n      // JavaScript goes here\n\n    </script>\n    ```\n\n4.  现在我们会在我们的 [`<script>`](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script \"HTML <script> 元素用于嵌入或引用可执行脚本。\") 元素中加上一些 JavaScript 来让这个页面做一些更有趣的东西——在 \"// JavaScript goes here\" 这一行下面加上以下代码：\n\n    ```js\n    function createParagraph() {\n      var para = document.createElement('p');\n      para.textContent = 'You clicked the button!';\n      document.body.appendChild(para);\n    }\n\n    var buttons = document.querySelectorAll('button');\n\n    for(var i = 0; i < buttons.length ; i++) {\n      buttons[i].addEventListener('click', createParagraph);\n    }\n    ```\n\n5.  保存你的文件并刷新你的浏览器——现在当你点击按钮时，你应当会看到一个新的段落产生并在下方显示。\n\n**Note**: 如果你的例子看上去不能工作，再检查所有的步骤和保证你都做对了。你有把原始代码作为 `.html` 文件保存为本地复件吗？你有刚好在`</body> `标签前加上 `<script>`元素吗？你有确切地输入所示的 JavaScript ？ \n\n**JavaScript 是区分大小写的，而且非常的讲究，所以你需要精确地输入所示的句法，不然它可能会无法工作.**\n\n**Note**: 你可以在 GitHub 上看到这个版本 [apply-javascript-internal.html](https://github.com/mdn/learning-area/blob/master/javascript/introduction-to-js-1/what-is-js/apply-javascript-internal.html) ([see it live too](http://mdn.github.io/learning-area/javascript/introduction-to-js-1/what-is-js/apply-javascript-internal.html)).\n\n### 外部的 JavaScript\n\n这方法很不错，但要是我们想要把我们的 JavaScript 放置在一个外部文件中呢？现在让我们探索这个。\n\n1.  首先，在跟你的简单 HTML 文件的同一目录下创建一个新的文件。命名为 `script.js` ——保证它以 .js 为文件扩展名，因为这是它被认作是 JavaScript 的方式。\n\n2.  然后，把所有在你现在的 `<script>`元素中的脚本 [script] 提取出来并粘贴到 .js 文件。保存这个文件。\n\n3.  现在替换你的 `<script>`元素为如下：\n\n    ```html\n    <script src=\"script.js\"></script>\n    ```\n\n4.  保存然后刷新你的浏览器，然后你应该看到同样的东西！它工作起来是一样的，但是现在我们把 JavaScript 写进了一个外部文件。对于规划你的代码来说，这通常是一件好事，而且让它可以在多个 HTML 文件中重复使用。再加上 HTML 中没有一大堆脚本的话，HTML 会更容易阅读。\n\n**Note**: 你可以在 GitHub 上看到这个版本 as [apply-javascript-external.html](https://github.com/mdn/learning-area/blob/master/javascript/introduction-to-js-1/what-is-js/apply-javascript-external.html) and [script.js](https://github.com/mdn/learning-area/blob/master/javascript/introduction-to-js-1/what-is-js/script.js) ([see it live too](http://mdn.github.io/learning-area/javascript/introduction-to-js-1/what-is-js/apply-javascript-external.html)).\n\n### 内联 JavaScript 处理器\n\n注意，有时候你会遇到在 HTML 中存在着一丝真实的 JavaScript 代码。它或许看上去会像这样：\n\n```js\nfunction createParagraph() {\n  var para = document.createElement('p');\n  para.textContent = 'You clicked the button!';\n  document.body.appendChild(para);\n}\n```\n\n```html\n<button onclick=\"createParagraph()\">Click me!</button>\n```\n\n你可以在下面尝试这个版本的演示。\n\n这个演示有着跟前两节的演示一模一样的功能，除了 [`<button>`](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/button \"HTML <button> 元素表示一个可点击的按钮，可以用在表单或文档其它需要使用简单标准按钮的地方。\") 元素中包含了一个内联的 `onclick` 处理器以至于函数会在按钮被按下时运行。\n\n**然而请不要这样做。**  这是一个用 JavaScript 来污染你的 HTML 的坏实践，而且它还不高效——你会需要在每个想要 JavaScript 应用到的按钮上包含 `onclick=\"createParagraph()\"` 属性。\n\n使用一个纯 JavaScript 结构允许你使用一个指令来选取所有的按钮。我们在上面实现这一目的的代码看上去是这样的：\n\n```html\nvar buttons = document.querySelectorAll('button');\n\nfor(var i = 0; i < buttons.length ; i++) {\n  buttons[i].addEventListener('click', createParagraph);\n}\n```\n\n这或许看上去比 `onclick` 属性要长一些，但是这会应用于所有的按钮，无论页面上有多少个，和有多少个按钮被添加或者移除。不需要对 JavaScript 进行任何修改。\n\n**Note**: 尝试编辑你自己的 `apply-javascript.html` 版本并在文件中加上更多的按钮。当你重新加载时，你应该会发现所有的按钮被按下时都会创建一个段落。很简洁，不是吗？\n\n## 注释\n\n正如使用 HTML 和 CSS 一样，在你的 JavaScript 代码中书写会被浏览器忽略掉的注释是可行的，并且注释只用来为你的开发者同事提供关于代码如何工作的指引（包括你，如果你在 6 个月后回到你的代码并忘记了你做过些什么）。注释非常有用，而且你应该经常使用它们，尤其是在更大的应用程序中。这里有两类注释：\n\n*   一个单行注释书写在一个双正斜杠后 (//)，比如：\n\n    ```js\n    // I am a comment\n    ```\n\n*   一个多行注释书写在字符串 /* 和 */ 之间， 比如：\n\n    ```js\n    /*\n      I am also\n      a comment\n    */\n    ```\n\n所以举例说，我们可以用 “注释” 来为我们上一个演示的 JavaScript 注释：\n\n```js\n// Function: creates a new paragraph and append it to the bottom of the HTML body.\n\nfunction createParagraph() {\n  var para = document.createElement('p');\n  para.textContent = 'You clicked the button!';\n  document.body.appendChild(para);\n}\n\n/*\n  1\\. Get references to all the buttons on the page and soter them in an array.\n  2\\. Loop through all the buttons and add a click event listener to each one.\n\n  When any button is pressed, the createParagraph() function will be run.\n*/\n\nvar buttons = document.querySelectorAll('button');\n\nfor(var i = 0; i < buttons.length ; i++) {\n  buttons[i].addEventListener('click', createParagraph);\n}\n```\n\n## 总结\n\n所以你到这里了，你在 JavaScript 世界中的第一步。我们仅仅从理论开始，让你熟悉为什么你会使用 JavaScript，和你可以用它做什么事情。在这过程中你看到了一些代码示例并且学习到了 JavaScript 是如何与你网站中的其他代码适配的。\n\nJavaScript 现在或许看上去有一点令人畏惧，但不用担心——在这门课中我们会逐步地引领你。在下一篇文章我们会[全心投入到实践](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Introduction_to_JavaScript_1/A_first_splash)，让你专注其中并建立你自己的 JavaScript 例子。\n\n\n\n\n",[[1528182171127,["Administrator@Tielemao",[[1,8143,"\n"]],[8141,8141],[8142,8142]]],[1528182171597,["Administrator@Tielemao",[[1,8144,"\n"]],[8142,8142],[8143,8143]]],[1528182176130,["Administrator@Tielemao",[[1,8143,"```html"]],[8143,8143],[8150,8150]]],[1528182176671,["Administrator@Tielemao",[[1,8152,"\n"]],[8150,8150],[8151,8151]]],[1528182177722,["Administrator@Tielemao",[[1,8151,"| <!DOCTYPE html> |\n|  | <html lang=\"en-US\"> |\n|  | <head> |\n|  | <meta charset=\"utf-8\"> |\n|  | <title>Apply JavaScript example</title> |\n|  | </head> |\n|  | <body> |\n|  | <button>Click me</button> |\n|  | </body> |\n|  | </html> |"]],[8151,8151],[8380,8380]]],[1528182186993,["Administrator@Tielemao",[[-1,8151,"| <!DOCTYPE html> |\n|  | <html lang=\"en-US\"> |\n|  | <head> |\n|  | <meta charset=\"utf-8\"> |\n|  | <title>Apply JavaScript example</title> |\n|  | </head> |\n|  | <body> |\n|  | <button>Click me</button> |\n|  | </body> |\n|  | </html> |"]],[8151,8380],[8151,8151]]],[1528182239739,["Administrator@Tielemao",[[1,8151,"<!DOCTYPE html>\r\n<html lang=\"en-US\">\r\n  <head>\r\n    <meta charset=\"utf-8\">\r\n    <title>Apply JavaScript example</title>\r\n  </head>\r\n  <body>\r\n    <button>Click me</button>\r\n  </body>\r\n</html>"]],[8151,8151],[8342,8342]]],[1528182243089,["Administrator@Tielemao",[[-1,8166,"\r"],[-1,8187,"\r"],[-1,8197,"\r"],[-1,8225,"\r"],[-1,8270,"\r"],[-1,8281,"\r"],[-1,8291,"\r"],[-1,8322,"\r"],[-1,8333,"\r"],[1,8343,"```"]],[8334,8334],[8337,8337]]],[1528182279678,["Administrator@Tielemao",[[-1,8467,"\n"]],[8467,8467],[8466,8466]]],[1528182280791,["Administrator@Tielemao",[[-1,8497,"\n"]],[8497,8497],[8496,8496]]],[1528182309528,["Administrator@Tielemao",[[-1,8545,"](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script \"HTML <script> 元素用于嵌入或引用可执行脚本。\") "]],[8545,8645],[8545,8545]]],[1528182311366,["Administrator@Tielemao",[[-1,8534,"["]],[8535,8535],[8534,8534]]],[1528182451465,["Administrator@Tielemao",[[-1,8808,"\n"]],[8808,8808],[8807,8807]]],[1528182453052,["Administrator@Tielemao",[[-1,8861,";"]],[8862,8862],[8861,8861]]],[1528182454123,["Administrator@Tielemao",[[-1,8862,"\n"]],[8862,8862],[8861,8861]]],[1528182456814,["Administrator@Tielemao",[[1,8808,"\n"]],[8807,8807],[8808,8808]]],[1528182457805,["Administrator@Tielemao",[[-1,8808,"\n"]],[8808,8808],[8807,8807]]],[1528182471876,["Administrator@Tielemao",[[1,8812,"\t"]],[8812,8812],[8813,8813]]],[1528182472973,["Administrator@Tielemao",[[-1,8812,"\t"]],[8813,8813],[8812,8812]]],[1528182475048,["Administrator@Tielemao",[[1,8812,"  "]],[8812,8812],[8814,8814]]],[1528182477589,["Administrator@Tielemao",[[1,8868,"  "]],[8868,8868],[8870,8870]]],[1528182492617,["Administrator@Tielemao",[[1,8919,"  "]],[8919,8919],[8921,8921]]],[1528182501122,["Administrator@Tielemao",[[-1,8812,"  "]],[8814,8814],[8812,8812]]],[1528182502716,["Administrator@Tielemao",[[-1,8866,"  "]],[8868,8868],[8866,8866]]],[1528182504925,["Administrator@Tielemao",[[-1,8915,"  "]],[8917,8917],[8915,8915]]],[1528183931052,["Administrator@Tielemao",[[-1,10772,"你可以在下面尝试这个版本的演示。"]],[10772,10788],[10772,10772]]],[1528183931510,["Administrator@Tielemao",[[-1,10773,"\n"]],[10772,10772],[10771,10771]]],[1528183932362,["Administrator@Tielemao",[[-1,10772,"\n"]],[10771,10771],[10770,10770]]],[1528184113830,["Administrator@Tielemao",[[1,12874,"end"]],[12874,12874],[12877,12877]]],[1528184116137,["Administrator@Tielemao",[[1,12874,"["]],[12874,12874],[12875,12875]]],[1528184117165,["Administrator@Tielemao",[[-1,12874,"["]],[12875,12875],[12874,12874]]],[1528184119137,["Administrator@Tielemao",[[1,12874,"【"]],[12874,12874],[12875,12875]]],[1528184124677,["Administrator@Tielemao",[[1,12878,"】"]],[12878,12878],[12879,12879]]]]],["cafdaaa0-41df-42de-bef5-d7dc3eb378b1",1528186629869,"[[toc]]\n\n# 什么是JavaScript？\n\n\n欢迎来到 MDN JavaScript 初学者的课程！ 在第一篇文章中，我们将会站在一定的高度来俯看 JavaScript，回答一些像“它是什么？”和“它能做什么？”的问题 。并确保你熟悉 JavaScript 的用途。\n\n## 一个高水平的定义\n\nJavaScript 是允许你在网页中实现复杂事情的一门编程语言 —— 每次当你浏览网页时不只是显示静态信息—— 显示即时更新的内容， 或者交互式的地图，或 2D/3D 图形动画，又或者自动播放视频等，你可以确信，JavaScript 参与其中。这是 Web技术的三层蛋糕标准:\n\n![](https://mdn.mozillademos.org/files/13502/cake.png)\n\n*   [HTML](https://developer.mozilla.org/en-US/docs/Glossary/HTML \"HTML: HTML (HyperText Markup Language) is a descriptive language that specifies webpage structure.\")是一种标记语言，用来结构化我们的网页内容和赋予内容含义，例如定义段落、标题、和数据表,或在页面中嵌入图片和视频。\n*   [CSS](https://developer.mozilla.org/en-US/docs/Glossary/CSS \"CSS: CSS (Cascading Style Sheets) is a declarative language that controls how webpages look in the browser.\") 是一种样式规则语言，我们将样式应用于我们的 HTML 内容， 例如设置背景颜色和字体，在多个列种布局我们的内容。\n*   [JavaScript](https://developer.mozilla.org/en-US/docs/Glossary/JavaScript \"JavaScript: JavaScript (JS) is a programming language mostly used to dynamically script webpages on the client side, but it is also often utilized on the server-side, using packages such as Node.js.\") 是一种编程语言，允许你创建动态更新的内容，控制多媒体，图像动画，和一些其他的东西。好吧，虽然不是一切，但是它的神奇之处是你能够用几行JavaScript代码就能实现。\n\n这三个层次规矩地建立在彼此之上。让我们用一个简单的文本标签作为例子。我们可以用 HTML 来标记它，以赋予它结构和目的：\n\n```html\n<p>Player 1: Chris</p>\n```\n\n![](https://mdn.mozillademos.org/files/13422/just-html.png)\n\n然后我们可以加上一点 CSS 来使它看起来更好：\n\n```css\np {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n```\n\n![](https://mdn.mozillademos.org/files/13424/html-and-css.png)\n\n而最后，我们可以加上一些 JavaScript 来实现动态行为：\n\n```js\nvar para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n```\n\n尝试点击文本标签，观察会发生什么（同时注意，你可以在 GitHub 上找到这个演示—— [源代码](https://github.com/mdn/learning-area/blob/master/javascript/introduction-to-js-1/what-is-js/javascript-label.html)，或者 [实时运行](http://mdn.github.io/learning-area/javascript/introduction-to-js-1/what-is-js/javascript-label.html)）！\n\n![js-player]($res/js-player.gif)\n\nJavaScript 可以做比这更多的东西——让我们详细探索它可以做些什么。\n\n## 所以它_实际上_可以做什么？\n\nJavaScript 语言的核心包含一些普遍的编程特点，以让你可以做到如下的事情：\n\n*   在变量中储存有用的值。以上面的演示做例子，我们请求输入一个新的名字，然后把那个名字储存到一个叫 `name` 的变量.\n*   对一段文本（在编程中被称为“字符串”）进行操作。在上面的例子中，我们取出字符串 \"Player 1: \"，然后把它和 name 变量连结起来，创造出完整的文本标签，例：''Player 1: Chris\"。\n*   运行代码以响应在网页中发生的特定事件。在上述的例子中，我们用了一个 `click` 事件来检测按钮什么时候被点击，然后运行更新文本标签的代码。\n*   以及更多！\n\n然而更令人兴奋的是建立在 JavaScript 语言的核心之上的功能。在你的 JavaScript 代码里，被称为**应用程序编程接口** [Application Programming Interfaces  (APIs) ]  的功能会提供额外的超能力给你使用。\n\nAPIs 是已经建立好的一套代码组件，目的是让开发者可以实现除此之外很难甚至不可能实现的程序。它们的作用就像是已经制作好的家具套件对家居建设的作用一样——从一堆已经切好的木板开始组装一个书柜，显然比自己设计，寻找合适的木材，裁切至合适的大小和形状，找到合适大小的螺丝钉，然后组装成一个书柜要简单得多。\n\n它们 (APIs) 通常分成两个分类。\n\n![](https://mdn.mozillademos.org/files/13508/browser.png)\n\n**浏览器 APIs (Browser APIs)** 已经安装在你的网页浏览器中，而且能够从周围的计算机环境中揭露数据，或者做有用的复杂事情。举个例子：\n\n*   文档对象模型 API [[DOM (Document Object Model) API](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model)] 允许你操作 HTML 和 CSS，创建，移除和修改 HTML，动态地应用新的样式到你的页面，等等。比如说每次你在一个页面里看到一个弹出窗口，或者显示一些新的内容（像我们在上面的简单演示中看到那样），这就是 DOM 在运作。\n\n*   地理定位 API [[Geolocation API](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation)] 获取地理信息。这就是为什么谷歌地图 [[Google Maps](https://www.google.com/maps)] 可以找到你的位置，而且标示在地图上。\n\n*   画布 [[Canvas](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API)] 和 [WebGL](https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API) APIs 允许你创建生动的 2D 和 3D 图像。人们正运用这些网页技术进行一些令人惊叹的事情——比如说 [Chrome Experiments](https://www.chromeexperiments.com/webgl) 和 [webglsamples](http://webglsamples.org/)。\n\n*   音像和影像 APIs [[Audio and Video APIs](https://developer.mozilla.org/en-US/Apps/Fundamentals/Audio_and_video_delivery)]，像 [`HTMLMediaElement`](https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement \"从父级元素 HTML 元素继承属性\") 和 [WebRTC](https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API) 允许你运用多媒体去做一些非常有趣的事情，比如在网页中播放音像和影像，或者从你的网页摄像头中获取获取录像，然后在其他人的电脑上展示（尝试我们的简单快照演示 [[Snapshot demo](http://chrisdavidmills.github.io/snapshot/)] 以理解这个概念）。\n\n**Note**: 上述的很多演示都不能在旧的浏览器中运行——当进行实验时，在现代浏览器，像 Firefox, Chrome, Edge 或者 Opera，中运行会是一个好的想法。当你接近交付产品代码时，你会需要更深入地去考虑跨平台测试 [[cross browser testing](https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing)]（例：现实客户会使用的实际代码）。\n\n**第三方 APIs (Third party APIs)** 默认是没有安装到浏览器中的，而你通常需要从网络上的某些地方取得它们的代码和信息。举个例子：\n\n*   推特 API [[Twitter API](https://dev.twitter.com/overview/documentation)] 允许你做一些像是在你的网站上展示你的最新推送之类的事情。\n\n*   谷歌地图 API [[Google Maps API](https://developers.google.com/maps/)] 允许你去嵌入定制的地图到你的网站，和其他的功能。\n\n**Note**: 这些 APIs 是高级的，而我们不会在课程中涉及任何的这些 APIs，但是如果你想了解更多，上述的链接提供延展的文档供参考。\n\n这里还有更多可用的东西！然而，不要这么快就感到太过兴奋。你不可能只通过 24 小时的 JavaScript 学习，就能够构建下一个 Facebook, Google Maps 或者 Instagram——这里有很多的基础需要优先覆盖。而这就是为什么你在这里——让我们继续前进！\n\n## JavaScript 在你的页面上做什么？\n\n在这我们会开始确实地查看一些代码，而在这样做的同时，探索当你在你的页面上运行 JavaScript 的时候实际发生了什么。\n\n让我们简单地回顾当你在浏览器中读取一个网页时发生什么（在文章 [How CSS works](https://developer.mozilla.org/en-US/Learn/CSS/Introduction_to_CSS/How_CSS_works#How_does_CSS_actually_work) 中第一次谈及到）。 当你在浏览器中读取一个网页，你在一个实行环境（浏览器标签）中运行你的代码（HTML, CSS 和 JavaScript）。这就像是一个工厂，获取原材料（代码）然后出产一个产品（网页）。\n\n![](https://mdn.mozillademos.org/files/13504/execution.png)\n\n在 HTML 和 CSS 已经被集合和组装成一个网页后，浏览器的 JavaScript 引擎执行 JavaScript。这保证了当 JavaScript 开始运行时，网页的结构和样式已经在该出现的地方了。\n\n这是一个好事情，正如 JavaScript 的普遍用处是通过 DOM API（如之前提及的那样）动态地修改 HTML 和 CSS 来更新用户交界面。如果 JavaScript 在 HTML 和 CSS 加载完成之前加载运行，那么会发生错误。\n\n### 浏览器安全\n\n每个浏览器标签本身就是一个用来运行代码的分离的容器（这些容器用专业术语称为“运行环境”）——这意味着在大多数情况中，每个标签中的代码是完全分离地运行，而且在一个标签中的代码不能直接影响在另一个标签中的代码——或者在另一个网站中的。这是一个好的安全措施——如果不是这样的话，那么海盗们就可以开始写从其他网站偷取信息的代码，和其他像这样的坏事。\n\n**Note**: 这里有安全的方式去在不同网站/标签中传送代码和数据，但这些方法是高级的技术，而我们不会在这门课里覆盖这些。\n\n### JavaScript 运行顺序\n\n当浏览器遇到一块 JavaScript 代码时，它通常会按顺序运行这代码块，从上往下。这意味着你需要注意你放置代码的顺序。举个例子，让我们回到我们在第一个例子中看到的 JavaScript 代码块：\n\n```js\nvar para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n```\n\n在这里我们正选定一个文本段落 (line 1)，然后给它附上一个事件监听器 (line 3) 使得当这个段落被点击时，`updateName()` 代码块 (lines 5–8) 会被运行。`updateName()` 代码块（这类可以重复使用的代码块被称为“函数”）向用户请求一个新的名字，然后把这个名字插入到段落中以更新显示。\n\n如果你互换了代码里最初两行的顺序，它将不会工作——取而代之的是，你会在浏览器的开发者控制台中得到一个错误——TypeError: para is undefined [类型错误：para没有被定义]。这意味着 para 对象还不存在，所以我们不能为它增添一个事件监听器。\n\n**Note**: 这是一个很常见的错误——你需要注意在尝试对你的代码中引用的对象进行操作前，它已经存在。\n\n### 解释代码 vs 编译代码\n\n在编程环境中，你或许听说过这两个术语 **解释 [interpreted]** 和 **编译 [compiled]**。JavaScript 是一个解释语言——代码从上到下运行，而运行的结果会马上被返回。在浏览器运行代码前，你不必先把它转化为其他形式。\n\n另一方面来说，编译语言则需要在运行前转化为另一种形式。比如说 C/C++ 则要先被编译成汇编语言，然后再由电脑运行。\n\n两种方式都有不同的优势，然而就目前而言，我们不会谈论这些。\n\n### 服务器端代码 vs 客户端代码\n\n你或许也听说过  **服务器端 [server-side]** 和 **客户端 [client-side]**   代码这两个术语，尤其是在网页开发的语境中。客户端代码是在用户的电脑上运行的代码——当浏览一个网页时，这个网页的客户端代码就会被下载，然后由浏览器来运行和展示。在这个 JavaScript 模块，我们将会明确地探讨 **客户端 JavaScript [client-side JavaScript]**。\n\n在另一方面，服务器端代码则在服务器上运行，然后它的结果会由浏览器进行下载和展示。流行的服务器端网页语言包含以下几个例子：PHP, Python, Ruby, ASP.NET 和 JavaScript！JavaScript 同时也能用作服务器端语言，比如说在流行的 Node.js 环境中——你可以在我们的 [动态网页 - 服务器端编程 [Dynamic Websites – Server-side programming]](https://developer.mozilla.org/en-US/docs/Learn/Server-side) 主题中找到更多关于服务器端 JavaScript 的知识。\n\n**动态 [dynamic]** 这个词被用来描述客户端 JavaScript 和服务器端语言——它指的是能更新网页/应用的内容以在不同环境下显示不同事物，当有需要时产生新内容的能力。服务器端代码会动态地在服务器上产生新的内容，比如说从数据库中提取信息。反之，客户端 JavaScript则在用户的浏览器中动态地生成新的内容，比如说创建一个新的 HTML 表格，从中插入从服务器请求到的数据，然后在已经向用户展示了的网页中显示这个表格。在这两个语境中，动态的意义有细微的不同，但是有联系，而且两种方法（服务器端和客户端）通常是在一起工作的。\n\n一个没有动态更新内容的网页被指作 **静态 [static]** ——它只会一直显示一样的内容。\n\n## 怎样向你的页面添加 JavaScript？\n\nJavaScript 以一种近似于 CSS 的方式应用到你的 HTML 页面中。尽管 CSS 使用 `<link>` 元素去应用外部的样式表 [stylesheet] 和 `<style>`元素去应用内部的样式表到 HTML，JavaScript 只需要在 HTML 世界里的一个元素—— `<script>` 元素。让我们学习一下它怎么工作。\n\n### 内部的 JavaScript\n\n1.  首先，复制我们的范例文件 [apply-javascript.html](https://github.com/mdn/learning-area/blob/master/javascript/introduction-to-js-1/what-is-js/apply-javascript.html) 到本地。储存到一个可以察觉的目录中。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en-US\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Apply JavaScript example</title>\n  </head>\n  <body>\n    <button>Click me</button>\n  </body>\n</html>\n```\n2.  在你的浏览器和文本编辑器中打开这个文件。你会看到这个 HTML 创建了一个包含了一个可点击按钮的简单网页。\n\n3.  `然后，在你的文本编辑器里，在你的结束 </body>` 标签前接上以下代码：\n\n    ```html\n    <script>\n      // JavaScript goes here\n    </script>\n    ```\n\n4.  现在我们会在我们的 `<script>`元素中加上一些 JavaScript 来让这个页面做一些更有趣的东西——在 \"// JavaScript goes here\" 这一行下面加上以下代码：\n\n    ```js\n    function createParagraph() {\n      var para = document.createElement('p');\n      para.textContent = 'You clicked the button!';\n      document.body.appendChild(para);\n    }\n    var buttons = document.querySelectorAll('button')\n    for(var i = 0; i < buttons.length ; i++) {\n      buttons[i].addEventListener('click', createParagraph);\n    }\n    ```\n\n5.  保存你的文件并刷新你的浏览器——现在当你点击按钮时，你应当会看到一个新的段落产生并在下方显示。\n\n**Note**: 如果你的例子看上去不能工作，再检查所有的步骤和保证你都做对了。你有把原始代码作为 `.html` 文件保存为本地复件吗？你有刚好在`</body> `标签前加上 `<script>`元素吗？你有确切地输入所示的 JavaScript ？ \n\n**JavaScript 是区分大小写的，而且非常的讲究，所以你需要精确地输入所示的句法，不然它可能会无法工作.**\n\n**Note**: 你可以在 GitHub 上看到这个版本 [apply-javascript-internal.html](https://github.com/mdn/learning-area/blob/master/javascript/introduction-to-js-1/what-is-js/apply-javascript-internal.html) ([see it live too](http://mdn.github.io/learning-area/javascript/introduction-to-js-1/what-is-js/apply-javascript-internal.html)).\n\n### 外部的 JavaScript\n\n这方法很不错，但要是我们想要把我们的 JavaScript 放置在一个外部文件中呢？现在让我们探索这个。\n\n1.  首先，在跟你的简单 HTML 文件的同一目录下创建一个新的文件。命名为 `script.js` ——保证它以 .js 为文件扩展名，因为这是它被认作是 JavaScript 的方式。\n\n2.  然后，把所有在你现在的 `<script>`元素中的脚本 [script] 提取出来并粘贴到 .js 文件。保存这个文件。\n\n3.  现在替换你的 `<script>`元素为如下：\n\n    ```html\n    <script src=\"script.js\"></script>\n    ```\n\n4.  保存然后刷新你的浏览器，然后你应该看到同样的东西！它工作起来是一样的，但是现在我们把 JavaScript 写进了一个外部文件。对于规划你的代码来说，这通常是一件好事，而且让它可以在多个 HTML 文件中重复使用。再加上 HTML 中没有一大堆脚本的话，HTML 会更容易阅读。\n\n**Note**: 你可以在 GitHub 上看到这个版本 as [apply-javascript-external.html](https://github.com/mdn/learning-area/blob/master/javascript/introduction-to-js-1/what-is-js/apply-javascript-external.html) and [script.js](https://github.com/mdn/learning-area/blob/master/javascript/introduction-to-js-1/what-is-js/script.js) ([see it live too](http://mdn.github.io/learning-area/javascript/introduction-to-js-1/what-is-js/apply-javascript-external.html)).\n\n### 内联 JavaScript 处理器\n\n注意，有时候你会遇到在 HTML 中存在着一丝真实的 JavaScript 代码。它或许看上去会像这样：\n\n```js\nfunction createParagraph() {\n  var para = document.createElement('p');\n  para.textContent = 'You clicked the button!';\n  document.body.appendChild(para);\n}\n```\n\n```html\n<button onclick=\"createParagraph()\">Click me!</button>\n```\n\n这个演示有着跟前两节的演示一模一样的功能，除了 [`<button>`](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/button \"HTML <button> 元素表示一个可点击的按钮，可以用在表单或文档其它需要使用简单标准按钮的地方。\") 元素中包含了一个内联的 `onclick` 处理器以至于函数会在按钮被按下时运行。\n\n**然而请不要这样做。**  这是一个用 JavaScript 来污染你的 HTML 的坏实践，而且它还不高效——你会需要在每个想要 JavaScript 应用到的按钮上包含 `onclick=\"createParagraph()\"` 属性。\n\n使用一个纯 JavaScript 结构允许你使用一个指令来选取所有的按钮。我们在上面实现这一目的的代码看上去是这样的：\n\n```html\nvar buttons = document.querySelectorAll('button');\n\nfor(var i = 0; i < buttons.length ; i++) {\n  buttons[i].addEventListener('click', createParagraph);\n}\n```\n\n这或许看上去比 `onclick` 属性要长一些，但是这会应用于所有的按钮，无论页面上有多少个，和有多少个按钮被添加或者移除。不需要对 JavaScript 进行任何修改。\n\n**Note**: 尝试编辑你自己的 `apply-javascript.html` 版本并在文件中加上更多的按钮。当你重新加载时，你应该会发现所有的按钮被按下时都会创建一个段落。很简洁，不是吗？\n\n## 注释\n\n正如使用 HTML 和 CSS 一样，在你的 JavaScript 代码中书写会被浏览器忽略掉的注释是可行的，并且注释只用来为你的开发者同事提供关于代码如何工作的指引（包括你，如果你在 6 个月后回到你的代码并忘记了你做过些什么）。注释非常有用，而且你应该经常使用它们，尤其是在更大的应用程序中。这里有两类注释：\n\n*   一个单行注释书写在一个双正斜杠后 (//)，比如：\n\n    ```js\n    // I am a comment\n    ```\n\n*   一个多行注释书写在字符串 /* 和 */ 之间， 比如：\n\n    ```js\n    /*\n      I am also\n      a comment\n    */\n    ```\n\n所以举例说，我们可以用 “注释” 来为我们上一个演示的 JavaScript 注释：\n\n```js\n// Function: creates a new paragraph and append it to the bottom of the HTML body.\n\nfunction createParagraph() {\n  var para = document.createElement('p');\n  para.textContent = 'You clicked the button!';\n  document.body.appendChild(para);\n}\n\n/*\n  1\\. Get references to all the buttons on the page and soter them in an array.\n  2\\. Loop through all the buttons and add a click event listener to each one.\n\n  When any button is pressed, the createParagraph() function will be run.\n*/\n\nvar buttons = document.querySelectorAll('button');\n\nfor(var i = 0; i < buttons.length ; i++) {\n  buttons[i].addEventListener('click', createParagraph);\n}\n```\n\n## 总结\n\n所以你到这里了，你在 JavaScript 世界中的第一步。我们仅仅从理论开始，让你熟悉为什么你会使用 JavaScript，和你可以用它做什么事情。在这过程中你看到了一些代码示例并且学习到了 JavaScript 是如何与你网站中的其他代码适配的。\n\nJavaScript 现在或许看上去有一点令人畏惧，但不用担心——在这门课中我们会逐步地引领你。在下一篇文章我们会[全心投入到实践](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Introduction_to_JavaScript_1/A_first_splash)，让你专注其中并建立你自己的 JavaScript 例子。\n\n\n【end】\n\n",[[1528186583293,["Administrator@Tielemao",[[-1,12873,"\n"]],[12873,12873],[12872,12872]]]]]]}