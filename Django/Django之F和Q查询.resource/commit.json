{"compress":true,"commitItems":[["eb625e0c-5399-4435-9032-e9ed406045b0",1534468083909,"# Django之F和Q查询\n\n[![](https://s3.51cto.com//wyfs02/M01/0E/77/wKiom1LOCIjgQg9jAAAOEw-eZgk217_middle.jpg)](http://blog.51cto.com/daibaiyang119)\n\n[daibaiyang119](http://blog.51cto.com/daibaiyang119) 关注 0人评论 [2110人阅读](javascript:;) [2017-12-03 19:25:45](javascript:;)\n\n    当一般的查询语句已经无法满足我们的需求时，Django为我们提供了F和Q复杂查询语句。假设场景一：老板说对数据库中所有的商品，在原价格的基础上涨价10元，你该怎么做？场景二：我要查询一个名字叫xxx，年龄是18岁，或者名字是yyy，年龄是是19岁的人，你该怎么写你的ORM语句？\n\n一、F查询   \n\n```python\nfrom django.db.models import F\nfrom app01.models import Book\n\nBook.objects.update(price=F(\"price\")+20)  # 对于book表中每本书的价格都在原价格的基础上增加20元\n```\n\n    就这样一条简单的语句就完成了对表中所有商品价格的更新，是不是很方便！如果没有F查询，你首先要获取原价格，再做一个算术运算，然后更新字段。F查询专门对对象中某列值的操作，不可使用__双下划线！\n\n二、Q查询\n\n    Q查询可以组合使用 “&”, “|” 操作符，当一个操作符是用于两个Q的对象,它产生一个新的Q对象，Q对象可以用 “~” 操作符放在前面表示否定，也可允许否定与不否定形式的组合。Q对象可以与关键字参数查询一起使用，不过一定要把Q对象放在关键字参数查询的前面。\n\n```python\nfrom django.db.models import Q\n\nprint(Book.objects.filter(Q(id=3))[0])  # 因为获取的结果是一个QuerySet，所以使用下标的方式获取结果\nprint(Book.objects.filter(Q(id=3)|Q(title=\"Go\"))[0])  # 查询id=3或者标题是“Go”的书\nprint(Book.objects.filter(Q(price__gte=70)&Q(title__startswith=\"J\")))  # 查询价格大于等于70并且标题是“J”开头的书\nprint(Book.objects.filter(Q(title__startswith=\"J\") & ~Q(id=3)))  # 查询标题是“J”开头并且id不是3的书\nprint(Book.objects.filter(Q(price=70)|Q(title=\"Python\"), publication_date=\"2017-09-26\"))  # Q对象可以与关键字参数查询一起使用，必须把普通关键字查询放到Q对象查询的后面\n```\n\n```python\nfrom django.db.models import Q\n\ncon = Q()\nq1 = Q()\nq1.connector = \"AND\"\nq1.children.append((\"email\", \"123@qq.com\"))\nq1.children.append((\"password\", \"abc123\"))\n\nq2 = Q()\nq2.connector = \"AND\"\nq2.children.append((\"username\", \"abc\"))\nq2.children.append((\"password\", \"xyz123\"))\n\ncon.add(q1, \"OR\")\ncon.add(q2, \"OR\")\n\nobj = models.UserInfo.objects.filter(con).first()\n\n# 查询email=123@qq.com和password=abc123 或者 username=abc和password=xyz123的用户信息\n```\n\n    上面的例子就是一个典型的复杂查询，通过将Q对象实例化来然后增加各个条件之间的关系，而且这种写法用在你不知道用户到底会传入多少个参数的时候很方便！",[[1534468032851,["Administrator@Tielemao",[[-1,16,"[![](https://s3.51cto.com//wyfs02/M01/0E/77/wKiom1LOCIjgQg9jAAAOEw-eZgk217_middle.jpg)](http://blog.51cto.com/daibaiyang119)\n\n[daibaiyang119](http://blog.51cto.com/daibaiyang119) 关注 0人评论 [2110人阅读](javascript:;) [2017-12-03 19:25:45](javascript:;)"]],[16,262],[16,16]]],[1534468033537,["Administrator@Tielemao",[[-1,17,"\n"]],[16,16],[15,15]]],[1534468041817,["Administrator@Tielemao",[[1,15,"http://blog.51cto.com/daibaiyang119/2046959"]],[15,15],[58,58]]],[1534468070667,["Administrator@Tielemao",[[-1,60,"    "],[1,64,"    "],[1,205,"#"],[-1,210,"   "],[1,213,"   "],[-1,365,"    "],[1,369,"    "],[-1,473,"    "],[1,477,"    "],[-1,1569,"    "],[1,1573,"    ##"]],[205,205],[208,208]]],[1534468071731,["Administrator@Tielemao",[[-1,207,"#"]],[208,208],[207,207]]],[1534468072590,["Administrator@Tielemao",[[1,207," "]],[207,207],[208,208]]],[1534468076442,["Administrator@Tielemao",[[1,469,"## "]],[469,469],[472,472]]]],null,"Administrator@Tielemao"],["7f09f3db-9fa6-4121-b1e5-d706919c7449",1534468623085,"# Django之F和Q查询\nhttp://blog.51cto.com/daibaiyang119/2046959\n\n    当一般的查询语句已经无法满足我们的需求时，Django为我们提供了F和Q复杂查询语句。假设场景一：老板说对数据库中所有的商品，在原价格的基础上涨价10元，你该怎么做？场景二：我要查询一个名字叫xxx，年龄是18岁，或者名字是yyy，年龄是是19岁的人，你该怎么写你的ORM语句？\n\n## 一、F查询   \n\n```python\nfrom django.db.models import F\nfrom app01.models import Book\n\nBook.objects.update(price=F(\"price\")+20)  # 对于book表中每本书的价格都在原价格的基础上增加20元\n```\n\n    就这样一条简单的语句就完成了对表中所有商品价格的更新，是不是很方便！如果没有F查询，你首先要获取原价格，再做一个算术运算，然后更新字段。F查询专门对对象中某列值的操作，不可使用__双下划线！\n\n## 二、Q查询\n\n    Q查询可以组合使用 “&”, “|” 操作符，当一个操作符是用于两个Q的对象,它产生一个新的Q对象，Q对象可以用 “~” 操作符放在前面表示否定，也可允许否定与不否定形式的组合。Q对象可以与关键字参数查询一起使用，不过一定要把Q对象放在关键字参数查询的前面。\n\n```python\nfrom django.db.models import Q\n\nprint(Book.objects.filter(Q(id=3))[0])  # 因为获取的结果是一个QuerySet，所以使用下标的方式获取结果\nprint(Book.objects.filter(Q(id=3)|Q(title=\"Go\"))[0])  # 查询id=3或者标题是“Go”的书\nprint(Book.objects.filter(Q(price__gte=70)&Q(title__startswith=\"J\")))  # 查询价格大于等于70并且标题是“J”开头的书\nprint(Book.objects.filter(Q(title__startswith=\"J\") & ~Q(id=3)))  # 查询标题是“J”开头并且id不是3的书\nprint(Book.objects.filter(Q(price=70)|Q(title=\"Python\"), publication_date=\"2017-09-26\"))  # Q对象可以与关键字参数查询一起使用，必须把普通关键字查询放到Q对象查询的后面\n```\n\n```python\nfrom django.db.models import Q\n\ncon = Q()\nq1 = Q()\nq1.connector = \"AND\"\nq1.children.append((\"email\", \"123@qq.com\"))\nq1.children.append((\"password\", \"abc123\"))\n\nq2 = Q()\nq2.connector = \"AND\"\nq2.children.append((\"username\", \"abc\"))\nq2.children.append((\"password\", \"xyz123\"))\n\ncon.add(q1, \"OR\")\ncon.add(q2, \"OR\")\n\nobj = models.UserInfo.objects.filter(con).first()\n\n# 查询email=123@qq.com和password=abc123 或者 username=abc和password=xyz123的用户信息\n```\n\n    上面的例子就是一个典型的复杂查询，通过将Q对象实例化来然后增加各个条件之间的关系，而且这种写法用在你不知道用户到底会传入多少个参数的时候很方便！",[[1534468587288,["Administrator@Tielemao",[[-1,1575,"    "]],[1579,1579],[1575,1575]]],[1534468587853,["Administrator@Tielemao",[[-1,1574,"\n"]],[1575,1575],[1574,1574]]],[1534468589090,["Administrator@Tielemao",[[1,1574,"\n"]],[1574,1574],[1575,1575]]],[1534468598231,["Administrator@Tielemao",[[-1,479,"    "]],[483,483],[479,479]]],[1534468598829,["Administrator@Tielemao",[[-1,478,"\n"]],[479,479],[478,478]]],[1534468599508,["Administrator@Tielemao",[[1,478,"\n"]],[478,478],[479,479]]],[1534468602935,["Administrator@Tielemao",[[-1,368,"    "]],[372,372],[368,368]]],[1534468603522,["Administrator@Tielemao",[[-1,367,"\n"]],[368,368],[367,367]]],[1534468603997,["Administrator@Tielemao",[[1,367,"\n"]],[367,367],[368,368]]],[1534468611193,["Administrator@Tielemao",[[-1,60,"    "]],[64,64],[60,60]]],[1534468611779,["Administrator@Tielemao",[[-1,59,"\n"]],[60,60],[59,59]]],[1534468612347,["Administrator@Tielemao",[[1,59,"\n"]],[59,59],[60,60]]]],null,"Administrator@Tielemao"]]}