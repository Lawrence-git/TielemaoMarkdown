{"compress":true,"commitItems":[["2aa2393a-3c52-4afc-a62c-2ffd3a62890a",1534422466083,"# Django学习笔记 — 自定义User模型\n\n2015年12月05日 17:24:57\n\n阅读数：6741\n\n最近做毕业设计，需要用到django和django rest framework，但是之前没写过django相关项目，只是看了一下，现在真正写起代码来各种问题呀。\n\n由于我需要的User模型与django自带的User有所不同，所以需要定义自己的User Model，这里记录一下方法，适用于django 1.5+。\n\n### **定义MyUserManager和MyUser**\n\n修改myapp下的models.py文件：\n\n```Python\nfrom django.db import models\nfrom django.contrib.auth.models import (\n    BaseUserManager, AbstractBaseUser, PermissionsMixin)\n\nclass MyUserManager(BaseUserManager):\n    def _create_user(self, username, email, password, **extra_fields):\n        \"\"\"\n        Creates and saves a User with the given username, email and password.\n        \"\"\"\n        if not username:\n            raise ValueError('The given username must be set')\n        email = self.normalize_email(email)\n        user = self.model(username=username, email=email, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n\n    def create_user(self, username, email, password, **extra_fields):\n        extra_fields.setdefault('is_staff', False)\n        return self._create_user(username, email, password, **extra_fields)\n\n    def create_superuser(self, username, email, password, **extra_fields):\n        extra_fields.setdefault('is_staff', True)\n\n        if extra_fields.get('is_staff') is not True:\n            raise ValueError('Superuser must have is_staff=True')\n\n        return self._create_user(username, email, password, **extra_fields)\n\nclass MyUser(AbstractBaseUser, PermissionsMixin):\n    username = models.CharField(max_length=254, unique=True, db_index=True)\n    email = models.EmailField('email address', max_length=254)\n\n    is_staff = models.BooleanField('staff status', default=False)\n    is_active = models.BooleanField('active', default=True)\n\n    USERNAME_FIELD = 'username'\n    REQUIRED_FIELDS = ['email']\n\n    objects = MyUserManager()\n\n    class Meta:\n        db_table = 'myuser'\n\n    def get_full_name(self):\n        return self.username\n\n    def get_short_name(self):\n        return self.username123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051\n```\n\n这里的MyUserManager和django的UserManager大同小异，也可以直接继承UserManager，然后修改_create_user函数即可。\n\nMyUser类即为我们自定义的User模型，我们可以根据需要添加各种属性。\n\n### **修改settings.py**\n\n修改settings.py文件，添加如下内容设置认证使用的model：\n\n```\nAUTH_USER_MODEL = 'myapp.MyUser'\n\n```\n\n### **更新数据库**\n\n首先删掉之前的数据库，然后重新建立，运行如下命令生成新的数据表：\n\n```\n$ python manage.py makemigrations myapp\n$ python manage.py migrate\n\n```\n\n经过这三步，默认的User模型已经被替换成了我们自己定义的User模型了。当然我们也可以定义自己的认证模型以及权限系统，后面涉及到相关部分再添加笔记了。\n\n版权声明：本文为博主原创文章，转载请注明出处。 https://blog.csdn.net/wangtaoking1/article/details/50187589",[[1534422453832,["Administrator@Tielemao",[[-1,26,"2015年12月05日 17:24:57\n\n阅读数：6741"]],[26,56],[26,26]]],[1534422454330,["Administrator@Tielemao",[[-1,27,"\n"]],[26,26],[25,25]]],[1534422455219,["Administrator@Tielemao",[[-1,26,"\n"]],[25,25],[24,24]]]],null,"Administrator@Tielemao"]]}