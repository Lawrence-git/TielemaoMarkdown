{"compress":true,"commitItems":[["97be16b3-e48e-4990-a153-8bf7da195606",1531398569126,"",[[1531398556062,["Administrator@Tielemao",[[1,0,"# _Django REST 异常处理_\n\n2016-02-03  /  袁慎建\n\n*   [异常](http://sjyuan.cc/django-rest-exceptions/#异常)\n    *   [Rest框架视图中的异常处理](http://sjyuan.cc/django-rest-exceptions/#rest框架视图中的异常处理)\n    *   [自定义异常处理](http://sjyuan.cc/django-rest-exceptions/#自定义异常处理)\n*   [API 引用](http://sjyuan.cc/django-rest-exceptions/#api-引用)\n    *   [APIException](http://sjyuan.cc/django-rest-exceptions/#apiexception)\n    *   [ParseError](http://sjyuan.cc/django-rest-exceptions/#parseerror)\n    *   [AuthenticationFailed](http://sjyuan.cc/django-rest-exceptions/#authenticationfailed)\n    *   [NotAuthenticated](http://sjyuan.cc/django-rest-exceptions/#notauthenticated)\n    *   [PermissionDenied](http://sjyuan.cc/django-rest-exceptions/#permissiondenied)\n    *   [NotFound](http://sjyuan.cc/django-rest-exceptions/#notfound)\n    *   [MethodNotAllowed](http://sjyuan.cc/django-rest-exceptions/#methodnotallowed)\n    *   [NotAcceptable](http://sjyuan.cc/django-rest-exceptions/#notacceptable)\n    *   [UnsupportedMediaType](http://sjyuan.cc/django-rest-exceptions/#unsupportedmediatype)\n    *   [Throttled](http://sjyuan.cc/django-rest-exceptions/#throttled)\n    *   [ValidationError](http://sjyuan.cc/django-rest-exceptions/#validationerror)\n\n* * *\n\n## 异常\n\n异常处理…允许错误处理在程序结构的中心或者高层级的地方被清晰有条理的组织起来。\n\n> Exceptions… allow error handling to be organized cleanly in a central or high-level place within the program structure. — Doug Hellmann, Python Exception Handling Techniques\n\n### Rest框架视图中的异常处理\n\nException handling in REST framework views REST框架的视图处理了各种异常，并正确地返回了错误响应。\n\n> REST framework’s views handle various exceptions, and deal with returning appropriate error responses.\n\n被处理的异常有：\n\n*   Rest框架内部抛出的`APIException`的子类。\n*   Django的`Http404`异常。\n*   Django的`PermissionDenied`异常\n\n针对每种情况，REST框架将返回一个包含了正确的状态码和content-type的响应。响应体包含了任何关于错误本身的额外细节。\n\n大部分的错误响应将在响应体中包含了一个`detail`的键。\n\n例如下面请求：\n\n```\nDELETE http://api.example.com/foo/bar HTTP/1.1\nAccept: application/json\n\n```\n\n你还可能接收到一个错误响应，表明对该资源`DELETE`方法不允许的。\n\n```\nHTTP/1.1 405 Method Not Allowed\nContent-Type: application/json\nContent-Length: 42\n\n{\"detail\": \"Method 'DELETE' not allowed.\"}\n\n```\n\n校验错误的处理有些轻微的不同，它会把字段的名字作为键包含进来。如果校验错误没有被指定到一个特定的字段，那么它会使用`non_field_errors`作为键，或者是你在setting文件中设定的`NON_FIELD_ERRORS_KEY`任意字符串的值。\n\n任何校验错误将类似下面的形式：\n\n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\nContent-Length: 94\n\n{\"amount\": [\"A valid integer is required.\"], \"description\": [\"This field may not be blank.\"]}\n\n```\n\n* * *\n\n### 自定义异常处理\n\n你可以实现你的自定义异常处理。可以通过创建一个异常处理函数将API视图中抛出的异常转换成响应对象。这样一来，你就可以控制你的API使用的错误响应格式。\n\n这个异常处理函数必须传入两个参数，第一个是要处理的异常，第二个是一个包含了任何额外上下文信息（例如当前被处理的视图）的字典。该异常处理函数要么返回一个`Response`对象，要么在异常无法处理的时候返回`None`。如果返回了`None`，异常将会被重新抛出，最后Django会返回一个标准的HTTP 500 ‘服务器错误’的响应。\n\n例如，你可能希望保证所有的错误响应体中都包含了HTTP状态码，像这样：\n\n```\nHTTP/1.1 405 Method Not Allowed\nContent-Type: application/json\nContent-Length: 62\n\n{\"status_code\": 405, \"detail\": \"Method 'DELETE' not allowed.\"}\n\n```\n\n为了更改响应的格式，你可以编写如下的自定义异常处理函数：\n\n```\nfrom rest_framework.views import exception_handler\n\ndef custom_exception_handler(exc, context):\n    # Call REST framework's default exception handler first,\n    # to get the standard error response.\n    response = exception_handler(exc, context)\n\n    # Now add the HTTP status code to the response.\n    if response is not None:\n        response.data['status_code'] = response.status_code\n\n    return response\n\n```\n\n参数context没有被默认的异常处理器使用，但是如果你需要更多的信息，例如你想获得当前被处理的视图，它就能给你援助之手了。通过`context['view']`就可以获取当前视图。\n\n同时你必须在你的settings中配置异常处理器，显式地给`EXCEPTION_HANDLER` 设置你期望的值，例如：\n\n```\nREST_FRAMEWORK = {\n    'EXCEPTION_HANDLER': 'my_project.my_app.utils.custom_exception_handler'\n}\n\n```\n\n如果没有指定，`’EXCEPTION_HANDLER‘`默认使用的是REST框架提供的标准的异常处理器：\n\n```\nREST_FRAMEWORK = {\n    'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler'\n}\n\n```\n\n注意一点，异常处理器仅仅在响应是由抛出的异常产生时被调用。如果由视图直接返回的响应，它将不会被调用，例如`HTTP_400_BAD_REQUEST`响应是在序列化校验失败时由generic视图返回的，此时异常处理器就不会被调用。\n\n* * *\n\n## API 引用\n\n### APIException\n\n**Signature**: `APIException()` 所有在`APIView`类中或者`@api_view`抛出的异常的**基类**。\n\n为了提供自定义异常，自定义个类，继承自`APIException`，并设置`.status_code`和`.default_detail`属性。\n\n例如，如果你的API依赖第三方服务，这个服务有时候可能会不可用，你或许可以考虑为”503 Service Unavailable”HTTP响应码实现一个异常类，你可以这么做：\n\n```\nfrom rest_framework.exceptions import APIException\n\nclass ServiceUnavailable(APIException):\n    status_code = 503\n    default_detail = 'Service temporarily unavailable, try again later.'\n\n```\n\n### ParseError\n\n**Signature**: `ParseError(detail=None)`\n\n在访问`request.data`的时候，如果请求包含了非法的数据，就会抛出该错误。\n\n默认，该异常返回”400 Bad Request”状态码。\n\n### AuthenticationFailed\n\n**Signature**: `AuthenticationFailed(detail=None)`\n\n当请求包含了错误的认证信息的时候抛出。 Raised when an incoming request includes incorrect authentication.\n\n默认情况下，该异常返回`401 Unauthenticated`，但是也有可能返回`403 Forbidden`，这取决于使用的认证模式。详细内容参考[authentication documentation](http://www.django-rest-framework.org/api-guide/authentication/)\n\n### NotAuthenticated\n\n**Signature**: `NotAuthenticated(detail=None)`\n\n当未认证的请求权限验证失败时抛出。\n\n默认情况下，该异常返回`401 Unauthenticated`，但是也有可能返回`403 Forbidden`，这取决于使用的认证模式。详细内容参考[authentication documentation](http://www.django-rest-framework.org/api-guide/authentication/)\n\n### PermissionDenied\n\n**Signature**: `PermissionDenied(detail=None)`\n\n当一个经认证的请求在权限校验失败时抛出。\n\n默认返回`403 Forbidden`\n\n### NotFound\n\n**Signature**: `NotFound(detail=None)`\n\n当给定的URL不存在时抛出。该异常等效于标准的Django`Http404` 异常。\n\n默认返回`404 Not Found`.\n\n### MethodNotAllowed\n\n**Signature**: `MethodNotAllowed(method, detail=None)`\n\n在视图中没有与请求匹配的处理方法时抛出。\n\n默认返回`405 Method Not Allowed`\n\n### NotAcceptable\n\n**Signature**: `NotAcceptable(detail=None)`\n\n当请求的接受头不满足任何可用的渲染器时抛出。\n\n默认返回`406 Not Acceptable`\n\n### UnsupportedMediaType\n\n**Signature**: `UnsupportedMediaType(media_type, detail=None)`\n\n当访问`request.data`时，没有解析器来处理请求数据的内容类型时抛出。\n\n默认返回`415 Unsupported Media Type`\n\n### Throttled\n\n**Signature**: `Throttled(wait=None, detail=None)` 当请求超过最大限制时抛出。\n\n默认返回`429 Too Many Requests`\n\n### ValidationError\n\n**Signature**: `ValidationError(detail)`\n\n`ValidationError`跟其他的`APIException`类稍微有些不同：\n\nThe ValidationError exception is slightly different from the other APIException classes:\n\n*   `detail`参数是强制的，非可选。\n*   `detail`参数可以是错误细节的列表或者字典，也可以是一个内嵌的数据结构。\n*   约定中，你应该导入序列化器模块并使用完整描述的`ValidationError`格式，这是为了跟Django的内置检验错误区分开来。例如.`raise serializers.ValidationError('This field must be an integer value.')`\n\n`ValidationError`类应该通过验证器类为序列化器和字段校验使用。它也会在调用`serializer.is_valid`方法，并指定了`raise_exception`时被抛出。\n\n```\nserializer.is_valid(raise_exception=True)\n\n```\n\n在generic视图中使用`raise_exception=True`标记，意味着你可以在你的API中全局复写校验错误响应的格式。如果你要这么做，建议你使用一个自定义的异常，上文有描述。\n\n默认情况下，该异常返回`400 Bad Request`\n\n[原文链接](http://www.django-rest-framework.org/api-guide/exceptions/)"]],[0,0],[6580,6580]]]]]]}